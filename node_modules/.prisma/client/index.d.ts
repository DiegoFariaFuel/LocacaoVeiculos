
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Marca
 * 
 */
export type Marca = $Result.DefaultSelection<Prisma.$MarcaPayload>
/**
 * Model Modelo
 * 
 */
export type Modelo = $Result.DefaultSelection<Prisma.$ModeloPayload>
/**
 * Model Veiculo
 * 
 */
export type Veiculo = $Result.DefaultSelection<Prisma.$VeiculoPayload>
/**
 * Model ContratoLocacao
 * 
 */
export type ContratoLocacao = $Result.DefaultSelection<Prisma.$ContratoLocacaoPayload>
/**
 * Model Ocorrencia
 * 
 */
export type Ocorrencia = $Result.DefaultSelection<Prisma.$OcorrenciaPayload>
/**
 * Model ContratoVeiculo
 * 
 */
export type ContratoVeiculo = $Result.DefaultSelection<Prisma.$ContratoVeiculoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.marca`: Exposes CRUD operations for the **Marca** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Marcas
    * const marcas = await prisma.marca.findMany()
    * ```
    */
  get marca(): Prisma.MarcaDelegate<ExtArgs>;

  /**
   * `prisma.modelo`: Exposes CRUD operations for the **Modelo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Modelos
    * const modelos = await prisma.modelo.findMany()
    * ```
    */
  get modelo(): Prisma.ModeloDelegate<ExtArgs>;

  /**
   * `prisma.veiculo`: Exposes CRUD operations for the **Veiculo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Veiculos
    * const veiculos = await prisma.veiculo.findMany()
    * ```
    */
  get veiculo(): Prisma.VeiculoDelegate<ExtArgs>;

  /**
   * `prisma.contratoLocacao`: Exposes CRUD operations for the **ContratoLocacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContratoLocacaos
    * const contratoLocacaos = await prisma.contratoLocacao.findMany()
    * ```
    */
  get contratoLocacao(): Prisma.ContratoLocacaoDelegate<ExtArgs>;

  /**
   * `prisma.ocorrencia`: Exposes CRUD operations for the **Ocorrencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ocorrencias
    * const ocorrencias = await prisma.ocorrencia.findMany()
    * ```
    */
  get ocorrencia(): Prisma.OcorrenciaDelegate<ExtArgs>;

  /**
   * `prisma.contratoVeiculo`: Exposes CRUD operations for the **ContratoVeiculo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContratoVeiculos
    * const contratoVeiculos = await prisma.contratoVeiculo.findMany()
    * ```
    */
  get contratoVeiculo(): Prisma.ContratoVeiculoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cliente: 'Cliente',
    Marca: 'Marca',
    Modelo: 'Modelo',
    Veiculo: 'Veiculo',
    ContratoLocacao: 'ContratoLocacao',
    Ocorrencia: 'Ocorrencia',
    ContratoVeiculo: 'ContratoVeiculo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "cliente" | "marca" | "modelo" | "veiculo" | "contratoLocacao" | "ocorrencia" | "contratoVeiculo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Marca: {
        payload: Prisma.$MarcaPayload<ExtArgs>
        fields: Prisma.MarcaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarcaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarcaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          findFirst: {
            args: Prisma.MarcaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarcaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          findMany: {
            args: Prisma.MarcaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>[]
          }
          create: {
            args: Prisma.MarcaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          createMany: {
            args: Prisma.MarcaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarcaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>[]
          }
          delete: {
            args: Prisma.MarcaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          update: {
            args: Prisma.MarcaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          deleteMany: {
            args: Prisma.MarcaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarcaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MarcaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          aggregate: {
            args: Prisma.MarcaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarca>
          }
          groupBy: {
            args: Prisma.MarcaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarcaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarcaCountArgs<ExtArgs>
            result: $Utils.Optional<MarcaCountAggregateOutputType> | number
          }
        }
      }
      Modelo: {
        payload: Prisma.$ModeloPayload<ExtArgs>
        fields: Prisma.ModeloFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModeloFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModeloFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          findFirst: {
            args: Prisma.ModeloFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModeloFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          findMany: {
            args: Prisma.ModeloFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>[]
          }
          create: {
            args: Prisma.ModeloCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          createMany: {
            args: Prisma.ModeloCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModeloCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>[]
          }
          delete: {
            args: Prisma.ModeloDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          update: {
            args: Prisma.ModeloUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          deleteMany: {
            args: Prisma.ModeloDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModeloUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ModeloUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          aggregate: {
            args: Prisma.ModeloAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModelo>
          }
          groupBy: {
            args: Prisma.ModeloGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModeloGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModeloCountArgs<ExtArgs>
            result: $Utils.Optional<ModeloCountAggregateOutputType> | number
          }
        }
      }
      Veiculo: {
        payload: Prisma.$VeiculoPayload<ExtArgs>
        fields: Prisma.VeiculoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VeiculoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VeiculoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          findFirst: {
            args: Prisma.VeiculoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VeiculoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          findMany: {
            args: Prisma.VeiculoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>[]
          }
          create: {
            args: Prisma.VeiculoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          createMany: {
            args: Prisma.VeiculoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VeiculoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>[]
          }
          delete: {
            args: Prisma.VeiculoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          update: {
            args: Prisma.VeiculoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          deleteMany: {
            args: Prisma.VeiculoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VeiculoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VeiculoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          aggregate: {
            args: Prisma.VeiculoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVeiculo>
          }
          groupBy: {
            args: Prisma.VeiculoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VeiculoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VeiculoCountArgs<ExtArgs>
            result: $Utils.Optional<VeiculoCountAggregateOutputType> | number
          }
        }
      }
      ContratoLocacao: {
        payload: Prisma.$ContratoLocacaoPayload<ExtArgs>
        fields: Prisma.ContratoLocacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContratoLocacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContratoLocacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          findFirst: {
            args: Prisma.ContratoLocacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContratoLocacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          findMany: {
            args: Prisma.ContratoLocacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>[]
          }
          create: {
            args: Prisma.ContratoLocacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          createMany: {
            args: Prisma.ContratoLocacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContratoLocacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>[]
          }
          delete: {
            args: Prisma.ContratoLocacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          update: {
            args: Prisma.ContratoLocacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          deleteMany: {
            args: Prisma.ContratoLocacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContratoLocacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContratoLocacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          aggregate: {
            args: Prisma.ContratoLocacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContratoLocacao>
          }
          groupBy: {
            args: Prisma.ContratoLocacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContratoLocacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContratoLocacaoCountArgs<ExtArgs>
            result: $Utils.Optional<ContratoLocacaoCountAggregateOutputType> | number
          }
        }
      }
      Ocorrencia: {
        payload: Prisma.$OcorrenciaPayload<ExtArgs>
        fields: Prisma.OcorrenciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OcorrenciaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OcorrenciaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          findFirst: {
            args: Prisma.OcorrenciaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OcorrenciaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          findMany: {
            args: Prisma.OcorrenciaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>[]
          }
          create: {
            args: Prisma.OcorrenciaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          createMany: {
            args: Prisma.OcorrenciaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OcorrenciaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>[]
          }
          delete: {
            args: Prisma.OcorrenciaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          update: {
            args: Prisma.OcorrenciaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          deleteMany: {
            args: Prisma.OcorrenciaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OcorrenciaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OcorrenciaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          aggregate: {
            args: Prisma.OcorrenciaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOcorrencia>
          }
          groupBy: {
            args: Prisma.OcorrenciaGroupByArgs<ExtArgs>
            result: $Utils.Optional<OcorrenciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.OcorrenciaCountArgs<ExtArgs>
            result: $Utils.Optional<OcorrenciaCountAggregateOutputType> | number
          }
        }
      }
      ContratoVeiculo: {
        payload: Prisma.$ContratoVeiculoPayload<ExtArgs>
        fields: Prisma.ContratoVeiculoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContratoVeiculoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContratoVeiculoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>
          }
          findFirst: {
            args: Prisma.ContratoVeiculoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContratoVeiculoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>
          }
          findMany: {
            args: Prisma.ContratoVeiculoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>[]
          }
          create: {
            args: Prisma.ContratoVeiculoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>
          }
          createMany: {
            args: Prisma.ContratoVeiculoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContratoVeiculoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>[]
          }
          delete: {
            args: Prisma.ContratoVeiculoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>
          }
          update: {
            args: Prisma.ContratoVeiculoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>
          }
          deleteMany: {
            args: Prisma.ContratoVeiculoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContratoVeiculoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContratoVeiculoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoVeiculoPayload>
          }
          aggregate: {
            args: Prisma.ContratoVeiculoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContratoVeiculo>
          }
          groupBy: {
            args: Prisma.ContratoVeiculoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContratoVeiculoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContratoVeiculoCountArgs<ExtArgs>
            result: $Utils.Optional<ContratoVeiculoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MarcaCountOutputType
   */

  export type MarcaCountOutputType = {
    veiculos: number
  }

  export type MarcaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | MarcaCountOutputTypeCountVeiculosArgs
  }

  // Custom InputTypes
  /**
   * MarcaCountOutputType without action
   */
  export type MarcaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarcaCountOutputType
     */
    select?: MarcaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MarcaCountOutputType without action
   */
  export type MarcaCountOutputTypeCountVeiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VeiculoWhereInput
  }


  /**
   * Count Type ModeloCountOutputType
   */

  export type ModeloCountOutputType = {
    veiculos: number
  }

  export type ModeloCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | ModeloCountOutputTypeCountVeiculosArgs
  }

  // Custom InputTypes
  /**
   * ModeloCountOutputType without action
   */
  export type ModeloCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloCountOutputType
     */
    select?: ModeloCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModeloCountOutputType without action
   */
  export type ModeloCountOutputTypeCountVeiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VeiculoWhereInput
  }


  /**
   * Count Type VeiculoCountOutputType
   */

  export type VeiculoCountOutputType = {
    contratos: number
  }

  export type VeiculoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contratos?: boolean | VeiculoCountOutputTypeCountContratosArgs
  }

  // Custom InputTypes
  /**
   * VeiculoCountOutputType without action
   */
  export type VeiculoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VeiculoCountOutputType
     */
    select?: VeiculoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VeiculoCountOutputType without action
   */
  export type VeiculoCountOutputTypeCountContratosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoVeiculoWhereInput
  }


  /**
   * Count Type ContratoLocacaoCountOutputType
   */

  export type ContratoLocacaoCountOutputType = {
    veiculos: number
    ocorrencias: number
  }

  export type ContratoLocacaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | ContratoLocacaoCountOutputTypeCountVeiculosArgs
    ocorrencias?: boolean | ContratoLocacaoCountOutputTypeCountOcorrenciasArgs
  }

  // Custom InputTypes
  /**
   * ContratoLocacaoCountOutputType without action
   */
  export type ContratoLocacaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacaoCountOutputType
     */
    select?: ContratoLocacaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContratoLocacaoCountOutputType without action
   */
  export type ContratoLocacaoCountOutputTypeCountVeiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoVeiculoWhereInput
  }

  /**
   * ContratoLocacaoCountOutputType without action
   */
  export type ContratoLocacaoCountOutputTypeCountOcorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OcorrenciaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    password: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    password: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    password: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    email: string
    password: string
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
  }


  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      password: string
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clientes and returns the data saved in the database.
     * @param {ClienteCreateManyAndReturnArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clientes and only return the `id`
     * const clienteWithIdOnly = await prisma.cliente.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClienteCreateManyAndReturnArgs>(args?: SelectSubset<T, ClienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nome: FieldRef<"Cliente", 'String'>
    readonly email: FieldRef<"Cliente", 'String'>
    readonly password: FieldRef<"Cliente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente createManyAndReturn
   */
  export type ClienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
  }


  /**
   * Model Marca
   */

  export type AggregateMarca = {
    _count: MarcaCountAggregateOutputType | null
    _avg: MarcaAvgAggregateOutputType | null
    _sum: MarcaSumAggregateOutputType | null
    _min: MarcaMinAggregateOutputType | null
    _max: MarcaMaxAggregateOutputType | null
  }

  export type MarcaAvgAggregateOutputType = {
    id: number | null
  }

  export type MarcaSumAggregateOutputType = {
    id: number | null
  }

  export type MarcaMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type MarcaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type MarcaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type MarcaAvgAggregateInputType = {
    id?: true
  }

  export type MarcaSumAggregateInputType = {
    id?: true
  }

  export type MarcaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type MarcaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type MarcaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type MarcaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Marca to aggregate.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Marcas
    **/
    _count?: true | MarcaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarcaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarcaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarcaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarcaMaxAggregateInputType
  }

  export type GetMarcaAggregateType<T extends MarcaAggregateArgs> = {
        [P in keyof T & keyof AggregateMarca]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarca[P]>
      : GetScalarType<T[P], AggregateMarca[P]>
  }




  export type MarcaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarcaWhereInput
    orderBy?: MarcaOrderByWithAggregationInput | MarcaOrderByWithAggregationInput[]
    by: MarcaScalarFieldEnum[] | MarcaScalarFieldEnum
    having?: MarcaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarcaCountAggregateInputType | true
    _avg?: MarcaAvgAggregateInputType
    _sum?: MarcaSumAggregateInputType
    _min?: MarcaMinAggregateInputType
    _max?: MarcaMaxAggregateInputType
  }

  export type MarcaGroupByOutputType = {
    id: number
    nome: string
    _count: MarcaCountAggregateOutputType | null
    _avg: MarcaAvgAggregateOutputType | null
    _sum: MarcaSumAggregateOutputType | null
    _min: MarcaMinAggregateOutputType | null
    _max: MarcaMaxAggregateOutputType | null
  }

  type GetMarcaGroupByPayload<T extends MarcaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarcaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarcaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarcaGroupByOutputType[P]>
            : GetScalarType<T[P], MarcaGroupByOutputType[P]>
        }
      >
    >


  export type MarcaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    veiculos?: boolean | Marca$veiculosArgs<ExtArgs>
    _count?: boolean | MarcaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marca"]>

  export type MarcaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["marca"]>

  export type MarcaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type MarcaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | Marca$veiculosArgs<ExtArgs>
    _count?: boolean | MarcaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MarcaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MarcaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Marca"
    objects: {
      veiculos: Prisma.$VeiculoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["marca"]>
    composites: {}
  }

  type MarcaGetPayload<S extends boolean | null | undefined | MarcaDefaultArgs> = $Result.GetResult<Prisma.$MarcaPayload, S>

  type MarcaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MarcaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MarcaCountAggregateInputType | true
    }

  export interface MarcaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Marca'], meta: { name: 'Marca' } }
    /**
     * Find zero or one Marca that matches the filter.
     * @param {MarcaFindUniqueArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarcaFindUniqueArgs>(args: SelectSubset<T, MarcaFindUniqueArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Marca that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MarcaFindUniqueOrThrowArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarcaFindUniqueOrThrowArgs>(args: SelectSubset<T, MarcaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Marca that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaFindFirstArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarcaFindFirstArgs>(args?: SelectSubset<T, MarcaFindFirstArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Marca that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaFindFirstOrThrowArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarcaFindFirstOrThrowArgs>(args?: SelectSubset<T, MarcaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Marcas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Marcas
     * const marcas = await prisma.marca.findMany()
     * 
     * // Get first 10 Marcas
     * const marcas = await prisma.marca.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marcaWithIdOnly = await prisma.marca.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarcaFindManyArgs>(args?: SelectSubset<T, MarcaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Marca.
     * @param {MarcaCreateArgs} args - Arguments to create a Marca.
     * @example
     * // Create one Marca
     * const Marca = await prisma.marca.create({
     *   data: {
     *     // ... data to create a Marca
     *   }
     * })
     * 
     */
    create<T extends MarcaCreateArgs>(args: SelectSubset<T, MarcaCreateArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Marcas.
     * @param {MarcaCreateManyArgs} args - Arguments to create many Marcas.
     * @example
     * // Create many Marcas
     * const marca = await prisma.marca.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarcaCreateManyArgs>(args?: SelectSubset<T, MarcaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Marcas and returns the data saved in the database.
     * @param {MarcaCreateManyAndReturnArgs} args - Arguments to create many Marcas.
     * @example
     * // Create many Marcas
     * const marca = await prisma.marca.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Marcas and only return the `id`
     * const marcaWithIdOnly = await prisma.marca.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarcaCreateManyAndReturnArgs>(args?: SelectSubset<T, MarcaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Marca.
     * @param {MarcaDeleteArgs} args - Arguments to delete one Marca.
     * @example
     * // Delete one Marca
     * const Marca = await prisma.marca.delete({
     *   where: {
     *     // ... filter to delete one Marca
     *   }
     * })
     * 
     */
    delete<T extends MarcaDeleteArgs>(args: SelectSubset<T, MarcaDeleteArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Marca.
     * @param {MarcaUpdateArgs} args - Arguments to update one Marca.
     * @example
     * // Update one Marca
     * const marca = await prisma.marca.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarcaUpdateArgs>(args: SelectSubset<T, MarcaUpdateArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Marcas.
     * @param {MarcaDeleteManyArgs} args - Arguments to filter Marcas to delete.
     * @example
     * // Delete a few Marcas
     * const { count } = await prisma.marca.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarcaDeleteManyArgs>(args?: SelectSubset<T, MarcaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Marcas
     * const marca = await prisma.marca.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarcaUpdateManyArgs>(args: SelectSubset<T, MarcaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Marca.
     * @param {MarcaUpsertArgs} args - Arguments to update or create a Marca.
     * @example
     * // Update or create a Marca
     * const marca = await prisma.marca.upsert({
     *   create: {
     *     // ... data to create a Marca
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Marca we want to update
     *   }
     * })
     */
    upsert<T extends MarcaUpsertArgs>(args: SelectSubset<T, MarcaUpsertArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaCountArgs} args - Arguments to filter Marcas to count.
     * @example
     * // Count the number of Marcas
     * const count = await prisma.marca.count({
     *   where: {
     *     // ... the filter for the Marcas we want to count
     *   }
     * })
    **/
    count<T extends MarcaCountArgs>(
      args?: Subset<T, MarcaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarcaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Marca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarcaAggregateArgs>(args: Subset<T, MarcaAggregateArgs>): Prisma.PrismaPromise<GetMarcaAggregateType<T>>

    /**
     * Group by Marca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarcaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarcaGroupByArgs['orderBy'] }
        : { orderBy?: MarcaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarcaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarcaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Marca model
   */
  readonly fields: MarcaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Marca.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarcaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    veiculos<T extends Marca$veiculosArgs<ExtArgs> = {}>(args?: Subset<T, Marca$veiculosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Marca model
   */ 
  interface MarcaFieldRefs {
    readonly id: FieldRef<"Marca", 'Int'>
    readonly nome: FieldRef<"Marca", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Marca findUnique
   */
  export type MarcaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca findUniqueOrThrow
   */
  export type MarcaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca findFirst
   */
  export type MarcaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Marcas.
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Marcas.
     */
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * Marca findFirstOrThrow
   */
  export type MarcaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Marcas.
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Marcas.
     */
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * Marca findMany
   */
  export type MarcaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marcas to fetch.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Marcas.
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * Marca create
   */
  export type MarcaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * The data needed to create a Marca.
     */
    data: XOR<MarcaCreateInput, MarcaUncheckedCreateInput>
  }

  /**
   * Marca createMany
   */
  export type MarcaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Marcas.
     */
    data: MarcaCreateManyInput | MarcaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Marca createManyAndReturn
   */
  export type MarcaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Marcas.
     */
    data: MarcaCreateManyInput | MarcaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Marca update
   */
  export type MarcaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * The data needed to update a Marca.
     */
    data: XOR<MarcaUpdateInput, MarcaUncheckedUpdateInput>
    /**
     * Choose, which Marca to update.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca updateMany
   */
  export type MarcaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Marcas.
     */
    data: XOR<MarcaUpdateManyMutationInput, MarcaUncheckedUpdateManyInput>
    /**
     * Filter which Marcas to update
     */
    where?: MarcaWhereInput
  }

  /**
   * Marca upsert
   */
  export type MarcaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * The filter to search for the Marca to update in case it exists.
     */
    where: MarcaWhereUniqueInput
    /**
     * In case the Marca found by the `where` argument doesn't exist, create a new Marca with this data.
     */
    create: XOR<MarcaCreateInput, MarcaUncheckedCreateInput>
    /**
     * In case the Marca was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarcaUpdateInput, MarcaUncheckedUpdateInput>
  }

  /**
   * Marca delete
   */
  export type MarcaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter which Marca to delete.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca deleteMany
   */
  export type MarcaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Marcas to delete
     */
    where?: MarcaWhereInput
  }

  /**
   * Marca.veiculos
   */
  export type Marca$veiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    where?: VeiculoWhereInput
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    cursor?: VeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Marca without action
   */
  export type MarcaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
  }


  /**
   * Model Modelo
   */

  export type AggregateModelo = {
    _count: ModeloCountAggregateOutputType | null
    _avg: ModeloAvgAggregateOutputType | null
    _sum: ModeloSumAggregateOutputType | null
    _min: ModeloMinAggregateOutputType | null
    _max: ModeloMaxAggregateOutputType | null
  }

  export type ModeloAvgAggregateOutputType = {
    id: number | null
  }

  export type ModeloSumAggregateOutputType = {
    id: number | null
  }

  export type ModeloMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ModeloMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ModeloCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type ModeloAvgAggregateInputType = {
    id?: true
  }

  export type ModeloSumAggregateInputType = {
    id?: true
  }

  export type ModeloMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ModeloMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ModeloCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type ModeloAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Modelo to aggregate.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Modelos
    **/
    _count?: true | ModeloCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModeloAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModeloSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModeloMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModeloMaxAggregateInputType
  }

  export type GetModeloAggregateType<T extends ModeloAggregateArgs> = {
        [P in keyof T & keyof AggregateModelo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModelo[P]>
      : GetScalarType<T[P], AggregateModelo[P]>
  }




  export type ModeloGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeloWhereInput
    orderBy?: ModeloOrderByWithAggregationInput | ModeloOrderByWithAggregationInput[]
    by: ModeloScalarFieldEnum[] | ModeloScalarFieldEnum
    having?: ModeloScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModeloCountAggregateInputType | true
    _avg?: ModeloAvgAggregateInputType
    _sum?: ModeloSumAggregateInputType
    _min?: ModeloMinAggregateInputType
    _max?: ModeloMaxAggregateInputType
  }

  export type ModeloGroupByOutputType = {
    id: number
    nome: string
    _count: ModeloCountAggregateOutputType | null
    _avg: ModeloAvgAggregateOutputType | null
    _sum: ModeloSumAggregateOutputType | null
    _min: ModeloMinAggregateOutputType | null
    _max: ModeloMaxAggregateOutputType | null
  }

  type GetModeloGroupByPayload<T extends ModeloGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModeloGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModeloGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModeloGroupByOutputType[P]>
            : GetScalarType<T[P], ModeloGroupByOutputType[P]>
        }
      >
    >


  export type ModeloSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    veiculos?: boolean | Modelo$veiculosArgs<ExtArgs>
    _count?: boolean | ModeloCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modelo"]>

  export type ModeloSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["modelo"]>

  export type ModeloSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type ModeloInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | Modelo$veiculosArgs<ExtArgs>
    _count?: boolean | ModeloCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ModeloIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ModeloPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Modelo"
    objects: {
      veiculos: Prisma.$VeiculoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["modelo"]>
    composites: {}
  }

  type ModeloGetPayload<S extends boolean | null | undefined | ModeloDefaultArgs> = $Result.GetResult<Prisma.$ModeloPayload, S>

  type ModeloCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModeloFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModeloCountAggregateInputType | true
    }

  export interface ModeloDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Modelo'], meta: { name: 'Modelo' } }
    /**
     * Find zero or one Modelo that matches the filter.
     * @param {ModeloFindUniqueArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModeloFindUniqueArgs>(args: SelectSubset<T, ModeloFindUniqueArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Modelo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModeloFindUniqueOrThrowArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModeloFindUniqueOrThrowArgs>(args: SelectSubset<T, ModeloFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Modelo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloFindFirstArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModeloFindFirstArgs>(args?: SelectSubset<T, ModeloFindFirstArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Modelo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloFindFirstOrThrowArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModeloFindFirstOrThrowArgs>(args?: SelectSubset<T, ModeloFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Modelos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Modelos
     * const modelos = await prisma.modelo.findMany()
     * 
     * // Get first 10 Modelos
     * const modelos = await prisma.modelo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modeloWithIdOnly = await prisma.modelo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModeloFindManyArgs>(args?: SelectSubset<T, ModeloFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Modelo.
     * @param {ModeloCreateArgs} args - Arguments to create a Modelo.
     * @example
     * // Create one Modelo
     * const Modelo = await prisma.modelo.create({
     *   data: {
     *     // ... data to create a Modelo
     *   }
     * })
     * 
     */
    create<T extends ModeloCreateArgs>(args: SelectSubset<T, ModeloCreateArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Modelos.
     * @param {ModeloCreateManyArgs} args - Arguments to create many Modelos.
     * @example
     * // Create many Modelos
     * const modelo = await prisma.modelo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModeloCreateManyArgs>(args?: SelectSubset<T, ModeloCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Modelos and returns the data saved in the database.
     * @param {ModeloCreateManyAndReturnArgs} args - Arguments to create many Modelos.
     * @example
     * // Create many Modelos
     * const modelo = await prisma.modelo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Modelos and only return the `id`
     * const modeloWithIdOnly = await prisma.modelo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModeloCreateManyAndReturnArgs>(args?: SelectSubset<T, ModeloCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Modelo.
     * @param {ModeloDeleteArgs} args - Arguments to delete one Modelo.
     * @example
     * // Delete one Modelo
     * const Modelo = await prisma.modelo.delete({
     *   where: {
     *     // ... filter to delete one Modelo
     *   }
     * })
     * 
     */
    delete<T extends ModeloDeleteArgs>(args: SelectSubset<T, ModeloDeleteArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Modelo.
     * @param {ModeloUpdateArgs} args - Arguments to update one Modelo.
     * @example
     * // Update one Modelo
     * const modelo = await prisma.modelo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModeloUpdateArgs>(args: SelectSubset<T, ModeloUpdateArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Modelos.
     * @param {ModeloDeleteManyArgs} args - Arguments to filter Modelos to delete.
     * @example
     * // Delete a few Modelos
     * const { count } = await prisma.modelo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModeloDeleteManyArgs>(args?: SelectSubset<T, ModeloDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modelos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Modelos
     * const modelo = await prisma.modelo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModeloUpdateManyArgs>(args: SelectSubset<T, ModeloUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Modelo.
     * @param {ModeloUpsertArgs} args - Arguments to update or create a Modelo.
     * @example
     * // Update or create a Modelo
     * const modelo = await prisma.modelo.upsert({
     *   create: {
     *     // ... data to create a Modelo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Modelo we want to update
     *   }
     * })
     */
    upsert<T extends ModeloUpsertArgs>(args: SelectSubset<T, ModeloUpsertArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Modelos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloCountArgs} args - Arguments to filter Modelos to count.
     * @example
     * // Count the number of Modelos
     * const count = await prisma.modelo.count({
     *   where: {
     *     // ... the filter for the Modelos we want to count
     *   }
     * })
    **/
    count<T extends ModeloCountArgs>(
      args?: Subset<T, ModeloCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModeloCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Modelo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModeloAggregateArgs>(args: Subset<T, ModeloAggregateArgs>): Prisma.PrismaPromise<GetModeloAggregateType<T>>

    /**
     * Group by Modelo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModeloGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModeloGroupByArgs['orderBy'] }
        : { orderBy?: ModeloGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModeloGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModeloGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Modelo model
   */
  readonly fields: ModeloFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Modelo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModeloClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    veiculos<T extends Modelo$veiculosArgs<ExtArgs> = {}>(args?: Subset<T, Modelo$veiculosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Modelo model
   */ 
  interface ModeloFieldRefs {
    readonly id: FieldRef<"Modelo", 'Int'>
    readonly nome: FieldRef<"Modelo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Modelo findUnique
   */
  export type ModeloFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo findUniqueOrThrow
   */
  export type ModeloFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo findFirst
   */
  export type ModeloFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Modelos.
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Modelos.
     */
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Modelo findFirstOrThrow
   */
  export type ModeloFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Modelos.
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Modelos.
     */
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Modelo findMany
   */
  export type ModeloFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelos to fetch.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Modelos.
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Modelo create
   */
  export type ModeloCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * The data needed to create a Modelo.
     */
    data: XOR<ModeloCreateInput, ModeloUncheckedCreateInput>
  }

  /**
   * Modelo createMany
   */
  export type ModeloCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Modelos.
     */
    data: ModeloCreateManyInput | ModeloCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Modelo createManyAndReturn
   */
  export type ModeloCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Modelos.
     */
    data: ModeloCreateManyInput | ModeloCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Modelo update
   */
  export type ModeloUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * The data needed to update a Modelo.
     */
    data: XOR<ModeloUpdateInput, ModeloUncheckedUpdateInput>
    /**
     * Choose, which Modelo to update.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo updateMany
   */
  export type ModeloUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Modelos.
     */
    data: XOR<ModeloUpdateManyMutationInput, ModeloUncheckedUpdateManyInput>
    /**
     * Filter which Modelos to update
     */
    where?: ModeloWhereInput
  }

  /**
   * Modelo upsert
   */
  export type ModeloUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * The filter to search for the Modelo to update in case it exists.
     */
    where: ModeloWhereUniqueInput
    /**
     * In case the Modelo found by the `where` argument doesn't exist, create a new Modelo with this data.
     */
    create: XOR<ModeloCreateInput, ModeloUncheckedCreateInput>
    /**
     * In case the Modelo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModeloUpdateInput, ModeloUncheckedUpdateInput>
  }

  /**
   * Modelo delete
   */
  export type ModeloDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter which Modelo to delete.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo deleteMany
   */
  export type ModeloDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Modelos to delete
     */
    where?: ModeloWhereInput
  }

  /**
   * Modelo.veiculos
   */
  export type Modelo$veiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    where?: VeiculoWhereInput
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    cursor?: VeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Modelo without action
   */
  export type ModeloDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
  }


  /**
   * Model Veiculo
   */

  export type AggregateVeiculo = {
    _count: VeiculoCountAggregateOutputType | null
    _avg: VeiculoAvgAggregateOutputType | null
    _sum: VeiculoSumAggregateOutputType | null
    _min: VeiculoMinAggregateOutputType | null
    _max: VeiculoMaxAggregateOutputType | null
  }

  export type VeiculoAvgAggregateOutputType = {
    id: number | null
    marcaId: number | null
    modeloId: number | null
  }

  export type VeiculoSumAggregateOutputType = {
    id: number | null
    marcaId: number | null
    modeloId: number | null
  }

  export type VeiculoMinAggregateOutputType = {
    id: number | null
    placa: string | null
    chassi: string | null
    anoFabricacao: Date | null
    cor: string | null
    status: string | null
    marcaId: number | null
    modeloId: number | null
  }

  export type VeiculoMaxAggregateOutputType = {
    id: number | null
    placa: string | null
    chassi: string | null
    anoFabricacao: Date | null
    cor: string | null
    status: string | null
    marcaId: number | null
    modeloId: number | null
  }

  export type VeiculoCountAggregateOutputType = {
    id: number
    placa: number
    chassi: number
    anoFabricacao: number
    cor: number
    status: number
    marcaId: number
    modeloId: number
    _all: number
  }


  export type VeiculoAvgAggregateInputType = {
    id?: true
    marcaId?: true
    modeloId?: true
  }

  export type VeiculoSumAggregateInputType = {
    id?: true
    marcaId?: true
    modeloId?: true
  }

  export type VeiculoMinAggregateInputType = {
    id?: true
    placa?: true
    chassi?: true
    anoFabricacao?: true
    cor?: true
    status?: true
    marcaId?: true
    modeloId?: true
  }

  export type VeiculoMaxAggregateInputType = {
    id?: true
    placa?: true
    chassi?: true
    anoFabricacao?: true
    cor?: true
    status?: true
    marcaId?: true
    modeloId?: true
  }

  export type VeiculoCountAggregateInputType = {
    id?: true
    placa?: true
    chassi?: true
    anoFabricacao?: true
    cor?: true
    status?: true
    marcaId?: true
    modeloId?: true
    _all?: true
  }

  export type VeiculoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Veiculo to aggregate.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Veiculos
    **/
    _count?: true | VeiculoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VeiculoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VeiculoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VeiculoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VeiculoMaxAggregateInputType
  }

  export type GetVeiculoAggregateType<T extends VeiculoAggregateArgs> = {
        [P in keyof T & keyof AggregateVeiculo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVeiculo[P]>
      : GetScalarType<T[P], AggregateVeiculo[P]>
  }




  export type VeiculoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VeiculoWhereInput
    orderBy?: VeiculoOrderByWithAggregationInput | VeiculoOrderByWithAggregationInput[]
    by: VeiculoScalarFieldEnum[] | VeiculoScalarFieldEnum
    having?: VeiculoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VeiculoCountAggregateInputType | true
    _avg?: VeiculoAvgAggregateInputType
    _sum?: VeiculoSumAggregateInputType
    _min?: VeiculoMinAggregateInputType
    _max?: VeiculoMaxAggregateInputType
  }

  export type VeiculoGroupByOutputType = {
    id: number
    placa: string
    chassi: string
    anoFabricacao: Date
    cor: string
    status: string
    marcaId: number
    modeloId: number
    _count: VeiculoCountAggregateOutputType | null
    _avg: VeiculoAvgAggregateOutputType | null
    _sum: VeiculoSumAggregateOutputType | null
    _min: VeiculoMinAggregateOutputType | null
    _max: VeiculoMaxAggregateOutputType | null
  }

  type GetVeiculoGroupByPayload<T extends VeiculoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VeiculoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VeiculoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VeiculoGroupByOutputType[P]>
            : GetScalarType<T[P], VeiculoGroupByOutputType[P]>
        }
      >
    >


  export type VeiculoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placa?: boolean
    chassi?: boolean
    anoFabricacao?: boolean
    cor?: boolean
    status?: boolean
    marcaId?: boolean
    modeloId?: boolean
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
    contratos?: boolean | Veiculo$contratosArgs<ExtArgs>
    _count?: boolean | VeiculoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["veiculo"]>

  export type VeiculoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placa?: boolean
    chassi?: boolean
    anoFabricacao?: boolean
    cor?: boolean
    status?: boolean
    marcaId?: boolean
    modeloId?: boolean
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["veiculo"]>

  export type VeiculoSelectScalar = {
    id?: boolean
    placa?: boolean
    chassi?: boolean
    anoFabricacao?: boolean
    cor?: boolean
    status?: boolean
    marcaId?: boolean
    modeloId?: boolean
  }

  export type VeiculoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
    contratos?: boolean | Veiculo$contratosArgs<ExtArgs>
    _count?: boolean | VeiculoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VeiculoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
  }

  export type $VeiculoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Veiculo"
    objects: {
      marca: Prisma.$MarcaPayload<ExtArgs>
      modelo: Prisma.$ModeloPayload<ExtArgs>
      contratos: Prisma.$ContratoVeiculoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      placa: string
      chassi: string
      anoFabricacao: Date
      cor: string
      status: string
      marcaId: number
      modeloId: number
    }, ExtArgs["result"]["veiculo"]>
    composites: {}
  }

  type VeiculoGetPayload<S extends boolean | null | undefined | VeiculoDefaultArgs> = $Result.GetResult<Prisma.$VeiculoPayload, S>

  type VeiculoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VeiculoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VeiculoCountAggregateInputType | true
    }

  export interface VeiculoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Veiculo'], meta: { name: 'Veiculo' } }
    /**
     * Find zero or one Veiculo that matches the filter.
     * @param {VeiculoFindUniqueArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VeiculoFindUniqueArgs>(args: SelectSubset<T, VeiculoFindUniqueArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Veiculo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VeiculoFindUniqueOrThrowArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VeiculoFindUniqueOrThrowArgs>(args: SelectSubset<T, VeiculoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Veiculo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindFirstArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VeiculoFindFirstArgs>(args?: SelectSubset<T, VeiculoFindFirstArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Veiculo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindFirstOrThrowArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VeiculoFindFirstOrThrowArgs>(args?: SelectSubset<T, VeiculoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Veiculos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Veiculos
     * const veiculos = await prisma.veiculo.findMany()
     * 
     * // Get first 10 Veiculos
     * const veiculos = await prisma.veiculo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const veiculoWithIdOnly = await prisma.veiculo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VeiculoFindManyArgs>(args?: SelectSubset<T, VeiculoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Veiculo.
     * @param {VeiculoCreateArgs} args - Arguments to create a Veiculo.
     * @example
     * // Create one Veiculo
     * const Veiculo = await prisma.veiculo.create({
     *   data: {
     *     // ... data to create a Veiculo
     *   }
     * })
     * 
     */
    create<T extends VeiculoCreateArgs>(args: SelectSubset<T, VeiculoCreateArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Veiculos.
     * @param {VeiculoCreateManyArgs} args - Arguments to create many Veiculos.
     * @example
     * // Create many Veiculos
     * const veiculo = await prisma.veiculo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VeiculoCreateManyArgs>(args?: SelectSubset<T, VeiculoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Veiculos and returns the data saved in the database.
     * @param {VeiculoCreateManyAndReturnArgs} args - Arguments to create many Veiculos.
     * @example
     * // Create many Veiculos
     * const veiculo = await prisma.veiculo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Veiculos and only return the `id`
     * const veiculoWithIdOnly = await prisma.veiculo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VeiculoCreateManyAndReturnArgs>(args?: SelectSubset<T, VeiculoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Veiculo.
     * @param {VeiculoDeleteArgs} args - Arguments to delete one Veiculo.
     * @example
     * // Delete one Veiculo
     * const Veiculo = await prisma.veiculo.delete({
     *   where: {
     *     // ... filter to delete one Veiculo
     *   }
     * })
     * 
     */
    delete<T extends VeiculoDeleteArgs>(args: SelectSubset<T, VeiculoDeleteArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Veiculo.
     * @param {VeiculoUpdateArgs} args - Arguments to update one Veiculo.
     * @example
     * // Update one Veiculo
     * const veiculo = await prisma.veiculo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VeiculoUpdateArgs>(args: SelectSubset<T, VeiculoUpdateArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Veiculos.
     * @param {VeiculoDeleteManyArgs} args - Arguments to filter Veiculos to delete.
     * @example
     * // Delete a few Veiculos
     * const { count } = await prisma.veiculo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VeiculoDeleteManyArgs>(args?: SelectSubset<T, VeiculoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Veiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Veiculos
     * const veiculo = await prisma.veiculo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VeiculoUpdateManyArgs>(args: SelectSubset<T, VeiculoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Veiculo.
     * @param {VeiculoUpsertArgs} args - Arguments to update or create a Veiculo.
     * @example
     * // Update or create a Veiculo
     * const veiculo = await prisma.veiculo.upsert({
     *   create: {
     *     // ... data to create a Veiculo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Veiculo we want to update
     *   }
     * })
     */
    upsert<T extends VeiculoUpsertArgs>(args: SelectSubset<T, VeiculoUpsertArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Veiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoCountArgs} args - Arguments to filter Veiculos to count.
     * @example
     * // Count the number of Veiculos
     * const count = await prisma.veiculo.count({
     *   where: {
     *     // ... the filter for the Veiculos we want to count
     *   }
     * })
    **/
    count<T extends VeiculoCountArgs>(
      args?: Subset<T, VeiculoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VeiculoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Veiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VeiculoAggregateArgs>(args: Subset<T, VeiculoAggregateArgs>): Prisma.PrismaPromise<GetVeiculoAggregateType<T>>

    /**
     * Group by Veiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VeiculoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VeiculoGroupByArgs['orderBy'] }
        : { orderBy?: VeiculoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VeiculoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVeiculoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Veiculo model
   */
  readonly fields: VeiculoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Veiculo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VeiculoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    marca<T extends MarcaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarcaDefaultArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    modelo<T extends ModeloDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ModeloDefaultArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contratos<T extends Veiculo$contratosArgs<ExtArgs> = {}>(args?: Subset<T, Veiculo$contratosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Veiculo model
   */ 
  interface VeiculoFieldRefs {
    readonly id: FieldRef<"Veiculo", 'Int'>
    readonly placa: FieldRef<"Veiculo", 'String'>
    readonly chassi: FieldRef<"Veiculo", 'String'>
    readonly anoFabricacao: FieldRef<"Veiculo", 'DateTime'>
    readonly cor: FieldRef<"Veiculo", 'String'>
    readonly status: FieldRef<"Veiculo", 'String'>
    readonly marcaId: FieldRef<"Veiculo", 'Int'>
    readonly modeloId: FieldRef<"Veiculo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Veiculo findUnique
   */
  export type VeiculoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo findUniqueOrThrow
   */
  export type VeiculoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo findFirst
   */
  export type VeiculoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Veiculos.
     */
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Veiculo findFirstOrThrow
   */
  export type VeiculoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Veiculos.
     */
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Veiculo findMany
   */
  export type VeiculoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculos to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Veiculo create
   */
  export type VeiculoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * The data needed to create a Veiculo.
     */
    data: XOR<VeiculoCreateInput, VeiculoUncheckedCreateInput>
  }

  /**
   * Veiculo createMany
   */
  export type VeiculoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Veiculos.
     */
    data: VeiculoCreateManyInput | VeiculoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Veiculo createManyAndReturn
   */
  export type VeiculoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Veiculos.
     */
    data: VeiculoCreateManyInput | VeiculoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Veiculo update
   */
  export type VeiculoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * The data needed to update a Veiculo.
     */
    data: XOR<VeiculoUpdateInput, VeiculoUncheckedUpdateInput>
    /**
     * Choose, which Veiculo to update.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo updateMany
   */
  export type VeiculoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Veiculos.
     */
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyInput>
    /**
     * Filter which Veiculos to update
     */
    where?: VeiculoWhereInput
  }

  /**
   * Veiculo upsert
   */
  export type VeiculoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * The filter to search for the Veiculo to update in case it exists.
     */
    where: VeiculoWhereUniqueInput
    /**
     * In case the Veiculo found by the `where` argument doesn't exist, create a new Veiculo with this data.
     */
    create: XOR<VeiculoCreateInput, VeiculoUncheckedCreateInput>
    /**
     * In case the Veiculo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VeiculoUpdateInput, VeiculoUncheckedUpdateInput>
  }

  /**
   * Veiculo delete
   */
  export type VeiculoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter which Veiculo to delete.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo deleteMany
   */
  export type VeiculoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Veiculos to delete
     */
    where?: VeiculoWhereInput
  }

  /**
   * Veiculo.contratos
   */
  export type Veiculo$contratosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    where?: ContratoVeiculoWhereInput
    orderBy?: ContratoVeiculoOrderByWithRelationInput | ContratoVeiculoOrderByWithRelationInput[]
    cursor?: ContratoVeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContratoVeiculoScalarFieldEnum | ContratoVeiculoScalarFieldEnum[]
  }

  /**
   * Veiculo without action
   */
  export type VeiculoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
  }


  /**
   * Model ContratoLocacao
   */

  export type AggregateContratoLocacao = {
    _count: ContratoLocacaoCountAggregateOutputType | null
    _avg: ContratoLocacaoAvgAggregateOutputType | null
    _sum: ContratoLocacaoSumAggregateOutputType | null
    _min: ContratoLocacaoMinAggregateOutputType | null
    _max: ContratoLocacaoMaxAggregateOutputType | null
  }

  export type ContratoLocacaoAvgAggregateOutputType = {
    id: number | null
  }

  export type ContratoLocacaoSumAggregateOutputType = {
    id: number | null
  }

  export type ContratoLocacaoMinAggregateOutputType = {
    id: number | null
    status: string | null
  }

  export type ContratoLocacaoMaxAggregateOutputType = {
    id: number | null
    status: string | null
  }

  export type ContratoLocacaoCountAggregateOutputType = {
    id: number
    status: number
    _all: number
  }


  export type ContratoLocacaoAvgAggregateInputType = {
    id?: true
  }

  export type ContratoLocacaoSumAggregateInputType = {
    id?: true
  }

  export type ContratoLocacaoMinAggregateInputType = {
    id?: true
    status?: true
  }

  export type ContratoLocacaoMaxAggregateInputType = {
    id?: true
    status?: true
  }

  export type ContratoLocacaoCountAggregateInputType = {
    id?: true
    status?: true
    _all?: true
  }

  export type ContratoLocacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContratoLocacao to aggregate.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContratoLocacaos
    **/
    _count?: true | ContratoLocacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContratoLocacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContratoLocacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContratoLocacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContratoLocacaoMaxAggregateInputType
  }

  export type GetContratoLocacaoAggregateType<T extends ContratoLocacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateContratoLocacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContratoLocacao[P]>
      : GetScalarType<T[P], AggregateContratoLocacao[P]>
  }




  export type ContratoLocacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoLocacaoWhereInput
    orderBy?: ContratoLocacaoOrderByWithAggregationInput | ContratoLocacaoOrderByWithAggregationInput[]
    by: ContratoLocacaoScalarFieldEnum[] | ContratoLocacaoScalarFieldEnum
    having?: ContratoLocacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContratoLocacaoCountAggregateInputType | true
    _avg?: ContratoLocacaoAvgAggregateInputType
    _sum?: ContratoLocacaoSumAggregateInputType
    _min?: ContratoLocacaoMinAggregateInputType
    _max?: ContratoLocacaoMaxAggregateInputType
  }

  export type ContratoLocacaoGroupByOutputType = {
    id: number
    status: string
    _count: ContratoLocacaoCountAggregateOutputType | null
    _avg: ContratoLocacaoAvgAggregateOutputType | null
    _sum: ContratoLocacaoSumAggregateOutputType | null
    _min: ContratoLocacaoMinAggregateOutputType | null
    _max: ContratoLocacaoMaxAggregateOutputType | null
  }

  type GetContratoLocacaoGroupByPayload<T extends ContratoLocacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContratoLocacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContratoLocacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContratoLocacaoGroupByOutputType[P]>
            : GetScalarType<T[P], ContratoLocacaoGroupByOutputType[P]>
        }
      >
    >


  export type ContratoLocacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    veiculos?: boolean | ContratoLocacao$veiculosArgs<ExtArgs>
    ocorrencias?: boolean | ContratoLocacao$ocorrenciasArgs<ExtArgs>
    _count?: boolean | ContratoLocacaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contratoLocacao"]>

  export type ContratoLocacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
  }, ExtArgs["result"]["contratoLocacao"]>

  export type ContratoLocacaoSelectScalar = {
    id?: boolean
    status?: boolean
  }

  export type ContratoLocacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | ContratoLocacao$veiculosArgs<ExtArgs>
    ocorrencias?: boolean | ContratoLocacao$ocorrenciasArgs<ExtArgs>
    _count?: boolean | ContratoLocacaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContratoLocacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContratoLocacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContratoLocacao"
    objects: {
      veiculos: Prisma.$ContratoVeiculoPayload<ExtArgs>[]
      ocorrencias: Prisma.$OcorrenciaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: string
    }, ExtArgs["result"]["contratoLocacao"]>
    composites: {}
  }

  type ContratoLocacaoGetPayload<S extends boolean | null | undefined | ContratoLocacaoDefaultArgs> = $Result.GetResult<Prisma.$ContratoLocacaoPayload, S>

  type ContratoLocacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContratoLocacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContratoLocacaoCountAggregateInputType | true
    }

  export interface ContratoLocacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContratoLocacao'], meta: { name: 'ContratoLocacao' } }
    /**
     * Find zero or one ContratoLocacao that matches the filter.
     * @param {ContratoLocacaoFindUniqueArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContratoLocacaoFindUniqueArgs>(args: SelectSubset<T, ContratoLocacaoFindUniqueArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContratoLocacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContratoLocacaoFindUniqueOrThrowArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContratoLocacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, ContratoLocacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContratoLocacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoFindFirstArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContratoLocacaoFindFirstArgs>(args?: SelectSubset<T, ContratoLocacaoFindFirstArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContratoLocacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoFindFirstOrThrowArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContratoLocacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, ContratoLocacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContratoLocacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContratoLocacaos
     * const contratoLocacaos = await prisma.contratoLocacao.findMany()
     * 
     * // Get first 10 ContratoLocacaos
     * const contratoLocacaos = await prisma.contratoLocacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contratoLocacaoWithIdOnly = await prisma.contratoLocacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContratoLocacaoFindManyArgs>(args?: SelectSubset<T, ContratoLocacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContratoLocacao.
     * @param {ContratoLocacaoCreateArgs} args - Arguments to create a ContratoLocacao.
     * @example
     * // Create one ContratoLocacao
     * const ContratoLocacao = await prisma.contratoLocacao.create({
     *   data: {
     *     // ... data to create a ContratoLocacao
     *   }
     * })
     * 
     */
    create<T extends ContratoLocacaoCreateArgs>(args: SelectSubset<T, ContratoLocacaoCreateArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContratoLocacaos.
     * @param {ContratoLocacaoCreateManyArgs} args - Arguments to create many ContratoLocacaos.
     * @example
     * // Create many ContratoLocacaos
     * const contratoLocacao = await prisma.contratoLocacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContratoLocacaoCreateManyArgs>(args?: SelectSubset<T, ContratoLocacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContratoLocacaos and returns the data saved in the database.
     * @param {ContratoLocacaoCreateManyAndReturnArgs} args - Arguments to create many ContratoLocacaos.
     * @example
     * // Create many ContratoLocacaos
     * const contratoLocacao = await prisma.contratoLocacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContratoLocacaos and only return the `id`
     * const contratoLocacaoWithIdOnly = await prisma.contratoLocacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContratoLocacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, ContratoLocacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContratoLocacao.
     * @param {ContratoLocacaoDeleteArgs} args - Arguments to delete one ContratoLocacao.
     * @example
     * // Delete one ContratoLocacao
     * const ContratoLocacao = await prisma.contratoLocacao.delete({
     *   where: {
     *     // ... filter to delete one ContratoLocacao
     *   }
     * })
     * 
     */
    delete<T extends ContratoLocacaoDeleteArgs>(args: SelectSubset<T, ContratoLocacaoDeleteArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContratoLocacao.
     * @param {ContratoLocacaoUpdateArgs} args - Arguments to update one ContratoLocacao.
     * @example
     * // Update one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContratoLocacaoUpdateArgs>(args: SelectSubset<T, ContratoLocacaoUpdateArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContratoLocacaos.
     * @param {ContratoLocacaoDeleteManyArgs} args - Arguments to filter ContratoLocacaos to delete.
     * @example
     * // Delete a few ContratoLocacaos
     * const { count } = await prisma.contratoLocacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContratoLocacaoDeleteManyArgs>(args?: SelectSubset<T, ContratoLocacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContratoLocacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContratoLocacaos
     * const contratoLocacao = await prisma.contratoLocacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContratoLocacaoUpdateManyArgs>(args: SelectSubset<T, ContratoLocacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContratoLocacao.
     * @param {ContratoLocacaoUpsertArgs} args - Arguments to update or create a ContratoLocacao.
     * @example
     * // Update or create a ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.upsert({
     *   create: {
     *     // ... data to create a ContratoLocacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContratoLocacao we want to update
     *   }
     * })
     */
    upsert<T extends ContratoLocacaoUpsertArgs>(args: SelectSubset<T, ContratoLocacaoUpsertArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContratoLocacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoCountArgs} args - Arguments to filter ContratoLocacaos to count.
     * @example
     * // Count the number of ContratoLocacaos
     * const count = await prisma.contratoLocacao.count({
     *   where: {
     *     // ... the filter for the ContratoLocacaos we want to count
     *   }
     * })
    **/
    count<T extends ContratoLocacaoCountArgs>(
      args?: Subset<T, ContratoLocacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContratoLocacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContratoLocacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContratoLocacaoAggregateArgs>(args: Subset<T, ContratoLocacaoAggregateArgs>): Prisma.PrismaPromise<GetContratoLocacaoAggregateType<T>>

    /**
     * Group by ContratoLocacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContratoLocacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContratoLocacaoGroupByArgs['orderBy'] }
        : { orderBy?: ContratoLocacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContratoLocacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContratoLocacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContratoLocacao model
   */
  readonly fields: ContratoLocacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContratoLocacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContratoLocacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    veiculos<T extends ContratoLocacao$veiculosArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacao$veiculosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "findMany"> | Null>
    ocorrencias<T extends ContratoLocacao$ocorrenciasArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacao$ocorrenciasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContratoLocacao model
   */ 
  interface ContratoLocacaoFieldRefs {
    readonly id: FieldRef<"ContratoLocacao", 'Int'>
    readonly status: FieldRef<"ContratoLocacao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContratoLocacao findUnique
   */
  export type ContratoLocacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao findUniqueOrThrow
   */
  export type ContratoLocacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao findFirst
   */
  export type ContratoLocacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContratoLocacaos.
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContratoLocacaos.
     */
    distinct?: ContratoLocacaoScalarFieldEnum | ContratoLocacaoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao findFirstOrThrow
   */
  export type ContratoLocacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContratoLocacaos.
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContratoLocacaos.
     */
    distinct?: ContratoLocacaoScalarFieldEnum | ContratoLocacaoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao findMany
   */
  export type ContratoLocacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacaos to fetch.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContratoLocacaos.
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    distinct?: ContratoLocacaoScalarFieldEnum | ContratoLocacaoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao create
   */
  export type ContratoLocacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a ContratoLocacao.
     */
    data: XOR<ContratoLocacaoCreateInput, ContratoLocacaoUncheckedCreateInput>
  }

  /**
   * ContratoLocacao createMany
   */
  export type ContratoLocacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContratoLocacaos.
     */
    data: ContratoLocacaoCreateManyInput | ContratoLocacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContratoLocacao createManyAndReturn
   */
  export type ContratoLocacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContratoLocacaos.
     */
    data: ContratoLocacaoCreateManyInput | ContratoLocacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContratoLocacao update
   */
  export type ContratoLocacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a ContratoLocacao.
     */
    data: XOR<ContratoLocacaoUpdateInput, ContratoLocacaoUncheckedUpdateInput>
    /**
     * Choose, which ContratoLocacao to update.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao updateMany
   */
  export type ContratoLocacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContratoLocacaos.
     */
    data: XOR<ContratoLocacaoUpdateManyMutationInput, ContratoLocacaoUncheckedUpdateManyInput>
    /**
     * Filter which ContratoLocacaos to update
     */
    where?: ContratoLocacaoWhereInput
  }

  /**
   * ContratoLocacao upsert
   */
  export type ContratoLocacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the ContratoLocacao to update in case it exists.
     */
    where: ContratoLocacaoWhereUniqueInput
    /**
     * In case the ContratoLocacao found by the `where` argument doesn't exist, create a new ContratoLocacao with this data.
     */
    create: XOR<ContratoLocacaoCreateInput, ContratoLocacaoUncheckedCreateInput>
    /**
     * In case the ContratoLocacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContratoLocacaoUpdateInput, ContratoLocacaoUncheckedUpdateInput>
  }

  /**
   * ContratoLocacao delete
   */
  export type ContratoLocacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter which ContratoLocacao to delete.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao deleteMany
   */
  export type ContratoLocacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContratoLocacaos to delete
     */
    where?: ContratoLocacaoWhereInput
  }

  /**
   * ContratoLocacao.veiculos
   */
  export type ContratoLocacao$veiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    where?: ContratoVeiculoWhereInput
    orderBy?: ContratoVeiculoOrderByWithRelationInput | ContratoVeiculoOrderByWithRelationInput[]
    cursor?: ContratoVeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContratoVeiculoScalarFieldEnum | ContratoVeiculoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao.ocorrencias
   */
  export type ContratoLocacao$ocorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    where?: OcorrenciaWhereInput
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    cursor?: OcorrenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * ContratoLocacao without action
   */
  export type ContratoLocacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
  }


  /**
   * Model Ocorrencia
   */

  export type AggregateOcorrencia = {
    _count: OcorrenciaCountAggregateOutputType | null
    _avg: OcorrenciaAvgAggregateOutputType | null
    _sum: OcorrenciaSumAggregateOutputType | null
    _min: OcorrenciaMinAggregateOutputType | null
    _max: OcorrenciaMaxAggregateOutputType | null
  }

  export type OcorrenciaAvgAggregateOutputType = {
    id: number | null
    contratoId: number | null
  }

  export type OcorrenciaSumAggregateOutputType = {
    id: number | null
    contratoId: number | null
  }

  export type OcorrenciaMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    contratoId: number | null
  }

  export type OcorrenciaMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    contratoId: number | null
  }

  export type OcorrenciaCountAggregateOutputType = {
    id: number
    descricao: number
    contratoId: number
    _all: number
  }


  export type OcorrenciaAvgAggregateInputType = {
    id?: true
    contratoId?: true
  }

  export type OcorrenciaSumAggregateInputType = {
    id?: true
    contratoId?: true
  }

  export type OcorrenciaMinAggregateInputType = {
    id?: true
    descricao?: true
    contratoId?: true
  }

  export type OcorrenciaMaxAggregateInputType = {
    id?: true
    descricao?: true
    contratoId?: true
  }

  export type OcorrenciaCountAggregateInputType = {
    id?: true
    descricao?: true
    contratoId?: true
    _all?: true
  }

  export type OcorrenciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ocorrencia to aggregate.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ocorrencias
    **/
    _count?: true | OcorrenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OcorrenciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OcorrenciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OcorrenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OcorrenciaMaxAggregateInputType
  }

  export type GetOcorrenciaAggregateType<T extends OcorrenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateOcorrencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOcorrencia[P]>
      : GetScalarType<T[P], AggregateOcorrencia[P]>
  }




  export type OcorrenciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OcorrenciaWhereInput
    orderBy?: OcorrenciaOrderByWithAggregationInput | OcorrenciaOrderByWithAggregationInput[]
    by: OcorrenciaScalarFieldEnum[] | OcorrenciaScalarFieldEnum
    having?: OcorrenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OcorrenciaCountAggregateInputType | true
    _avg?: OcorrenciaAvgAggregateInputType
    _sum?: OcorrenciaSumAggregateInputType
    _min?: OcorrenciaMinAggregateInputType
    _max?: OcorrenciaMaxAggregateInputType
  }

  export type OcorrenciaGroupByOutputType = {
    id: number
    descricao: string
    contratoId: number | null
    _count: OcorrenciaCountAggregateOutputType | null
    _avg: OcorrenciaAvgAggregateOutputType | null
    _sum: OcorrenciaSumAggregateOutputType | null
    _min: OcorrenciaMinAggregateOutputType | null
    _max: OcorrenciaMaxAggregateOutputType | null
  }

  type GetOcorrenciaGroupByPayload<T extends OcorrenciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OcorrenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OcorrenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OcorrenciaGroupByOutputType[P]>
            : GetScalarType<T[P], OcorrenciaGroupByOutputType[P]>
        }
      >
    >


  export type OcorrenciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    contratoId?: boolean
    contratoLocacao?: boolean | Ocorrencia$contratoLocacaoArgs<ExtArgs>
  }, ExtArgs["result"]["ocorrencia"]>

  export type OcorrenciaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    contratoId?: boolean
    contratoLocacao?: boolean | Ocorrencia$contratoLocacaoArgs<ExtArgs>
  }, ExtArgs["result"]["ocorrencia"]>

  export type OcorrenciaSelectScalar = {
    id?: boolean
    descricao?: boolean
    contratoId?: boolean
  }

  export type OcorrenciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contratoLocacao?: boolean | Ocorrencia$contratoLocacaoArgs<ExtArgs>
  }
  export type OcorrenciaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contratoLocacao?: boolean | Ocorrencia$contratoLocacaoArgs<ExtArgs>
  }

  export type $OcorrenciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ocorrencia"
    objects: {
      contratoLocacao: Prisma.$ContratoLocacaoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
      contratoId: number | null
    }, ExtArgs["result"]["ocorrencia"]>
    composites: {}
  }

  type OcorrenciaGetPayload<S extends boolean | null | undefined | OcorrenciaDefaultArgs> = $Result.GetResult<Prisma.$OcorrenciaPayload, S>

  type OcorrenciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OcorrenciaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OcorrenciaCountAggregateInputType | true
    }

  export interface OcorrenciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ocorrencia'], meta: { name: 'Ocorrencia' } }
    /**
     * Find zero or one Ocorrencia that matches the filter.
     * @param {OcorrenciaFindUniqueArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OcorrenciaFindUniqueArgs>(args: SelectSubset<T, OcorrenciaFindUniqueArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ocorrencia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OcorrenciaFindUniqueOrThrowArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OcorrenciaFindUniqueOrThrowArgs>(args: SelectSubset<T, OcorrenciaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ocorrencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindFirstArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OcorrenciaFindFirstArgs>(args?: SelectSubset<T, OcorrenciaFindFirstArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ocorrencia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindFirstOrThrowArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OcorrenciaFindFirstOrThrowArgs>(args?: SelectSubset<T, OcorrenciaFindFirstOrThrowArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ocorrencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ocorrencias
     * const ocorrencias = await prisma.ocorrencia.findMany()
     * 
     * // Get first 10 Ocorrencias
     * const ocorrencias = await prisma.ocorrencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ocorrenciaWithIdOnly = await prisma.ocorrencia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OcorrenciaFindManyArgs>(args?: SelectSubset<T, OcorrenciaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ocorrencia.
     * @param {OcorrenciaCreateArgs} args - Arguments to create a Ocorrencia.
     * @example
     * // Create one Ocorrencia
     * const Ocorrencia = await prisma.ocorrencia.create({
     *   data: {
     *     // ... data to create a Ocorrencia
     *   }
     * })
     * 
     */
    create<T extends OcorrenciaCreateArgs>(args: SelectSubset<T, OcorrenciaCreateArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ocorrencias.
     * @param {OcorrenciaCreateManyArgs} args - Arguments to create many Ocorrencias.
     * @example
     * // Create many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OcorrenciaCreateManyArgs>(args?: SelectSubset<T, OcorrenciaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ocorrencias and returns the data saved in the database.
     * @param {OcorrenciaCreateManyAndReturnArgs} args - Arguments to create many Ocorrencias.
     * @example
     * // Create many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ocorrencias and only return the `id`
     * const ocorrenciaWithIdOnly = await prisma.ocorrencia.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OcorrenciaCreateManyAndReturnArgs>(args?: SelectSubset<T, OcorrenciaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ocorrencia.
     * @param {OcorrenciaDeleteArgs} args - Arguments to delete one Ocorrencia.
     * @example
     * // Delete one Ocorrencia
     * const Ocorrencia = await prisma.ocorrencia.delete({
     *   where: {
     *     // ... filter to delete one Ocorrencia
     *   }
     * })
     * 
     */
    delete<T extends OcorrenciaDeleteArgs>(args: SelectSubset<T, OcorrenciaDeleteArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ocorrencia.
     * @param {OcorrenciaUpdateArgs} args - Arguments to update one Ocorrencia.
     * @example
     * // Update one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OcorrenciaUpdateArgs>(args: SelectSubset<T, OcorrenciaUpdateArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ocorrencias.
     * @param {OcorrenciaDeleteManyArgs} args - Arguments to filter Ocorrencias to delete.
     * @example
     * // Delete a few Ocorrencias
     * const { count } = await prisma.ocorrencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OcorrenciaDeleteManyArgs>(args?: SelectSubset<T, OcorrenciaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ocorrencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OcorrenciaUpdateManyArgs>(args: SelectSubset<T, OcorrenciaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ocorrencia.
     * @param {OcorrenciaUpsertArgs} args - Arguments to update or create a Ocorrencia.
     * @example
     * // Update or create a Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.upsert({
     *   create: {
     *     // ... data to create a Ocorrencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ocorrencia we want to update
     *   }
     * })
     */
    upsert<T extends OcorrenciaUpsertArgs>(args: SelectSubset<T, OcorrenciaUpsertArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ocorrencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaCountArgs} args - Arguments to filter Ocorrencias to count.
     * @example
     * // Count the number of Ocorrencias
     * const count = await prisma.ocorrencia.count({
     *   where: {
     *     // ... the filter for the Ocorrencias we want to count
     *   }
     * })
    **/
    count<T extends OcorrenciaCountArgs>(
      args?: Subset<T, OcorrenciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OcorrenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ocorrencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OcorrenciaAggregateArgs>(args: Subset<T, OcorrenciaAggregateArgs>): Prisma.PrismaPromise<GetOcorrenciaAggregateType<T>>

    /**
     * Group by Ocorrencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OcorrenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OcorrenciaGroupByArgs['orderBy'] }
        : { orderBy?: OcorrenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OcorrenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOcorrenciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ocorrencia model
   */
  readonly fields: OcorrenciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ocorrencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OcorrenciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contratoLocacao<T extends Ocorrencia$contratoLocacaoArgs<ExtArgs> = {}>(args?: Subset<T, Ocorrencia$contratoLocacaoArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ocorrencia model
   */ 
  interface OcorrenciaFieldRefs {
    readonly id: FieldRef<"Ocorrencia", 'Int'>
    readonly descricao: FieldRef<"Ocorrencia", 'String'>
    readonly contratoId: FieldRef<"Ocorrencia", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ocorrencia findUnique
   */
  export type OcorrenciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia findUniqueOrThrow
   */
  export type OcorrenciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia findFirst
   */
  export type OcorrenciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ocorrencias.
     */
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia findFirstOrThrow
   */
  export type OcorrenciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ocorrencias.
     */
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia findMany
   */
  export type OcorrenciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencias to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia create
   */
  export type OcorrenciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Ocorrencia.
     */
    data: XOR<OcorrenciaCreateInput, OcorrenciaUncheckedCreateInput>
  }

  /**
   * Ocorrencia createMany
   */
  export type OcorrenciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ocorrencias.
     */
    data: OcorrenciaCreateManyInput | OcorrenciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ocorrencia createManyAndReturn
   */
  export type OcorrenciaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ocorrencias.
     */
    data: OcorrenciaCreateManyInput | OcorrenciaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ocorrencia update
   */
  export type OcorrenciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Ocorrencia.
     */
    data: XOR<OcorrenciaUpdateInput, OcorrenciaUncheckedUpdateInput>
    /**
     * Choose, which Ocorrencia to update.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia updateMany
   */
  export type OcorrenciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ocorrencias.
     */
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyInput>
    /**
     * Filter which Ocorrencias to update
     */
    where?: OcorrenciaWhereInput
  }

  /**
   * Ocorrencia upsert
   */
  export type OcorrenciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Ocorrencia to update in case it exists.
     */
    where: OcorrenciaWhereUniqueInput
    /**
     * In case the Ocorrencia found by the `where` argument doesn't exist, create a new Ocorrencia with this data.
     */
    create: XOR<OcorrenciaCreateInput, OcorrenciaUncheckedCreateInput>
    /**
     * In case the Ocorrencia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OcorrenciaUpdateInput, OcorrenciaUncheckedUpdateInput>
  }

  /**
   * Ocorrencia delete
   */
  export type OcorrenciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter which Ocorrencia to delete.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia deleteMany
   */
  export type OcorrenciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ocorrencias to delete
     */
    where?: OcorrenciaWhereInput
  }

  /**
   * Ocorrencia.contratoLocacao
   */
  export type Ocorrencia$contratoLocacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    where?: ContratoLocacaoWhereInput
  }

  /**
   * Ocorrencia without action
   */
  export type OcorrenciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
  }


  /**
   * Model ContratoVeiculo
   */

  export type AggregateContratoVeiculo = {
    _count: ContratoVeiculoCountAggregateOutputType | null
    _avg: ContratoVeiculoAvgAggregateOutputType | null
    _sum: ContratoVeiculoSumAggregateOutputType | null
    _min: ContratoVeiculoMinAggregateOutputType | null
    _max: ContratoVeiculoMaxAggregateOutputType | null
  }

  export type ContratoVeiculoAvgAggregateOutputType = {
    id: number | null
    contratoLocacaoId: number | null
    veiculoId: number | null
  }

  export type ContratoVeiculoSumAggregateOutputType = {
    id: number | null
    contratoLocacaoId: number | null
    veiculoId: number | null
  }

  export type ContratoVeiculoMinAggregateOutputType = {
    id: number | null
    contratoLocacaoId: number | null
    veiculoId: number | null
  }

  export type ContratoVeiculoMaxAggregateOutputType = {
    id: number | null
    contratoLocacaoId: number | null
    veiculoId: number | null
  }

  export type ContratoVeiculoCountAggregateOutputType = {
    id: number
    contratoLocacaoId: number
    veiculoId: number
    _all: number
  }


  export type ContratoVeiculoAvgAggregateInputType = {
    id?: true
    contratoLocacaoId?: true
    veiculoId?: true
  }

  export type ContratoVeiculoSumAggregateInputType = {
    id?: true
    contratoLocacaoId?: true
    veiculoId?: true
  }

  export type ContratoVeiculoMinAggregateInputType = {
    id?: true
    contratoLocacaoId?: true
    veiculoId?: true
  }

  export type ContratoVeiculoMaxAggregateInputType = {
    id?: true
    contratoLocacaoId?: true
    veiculoId?: true
  }

  export type ContratoVeiculoCountAggregateInputType = {
    id?: true
    contratoLocacaoId?: true
    veiculoId?: true
    _all?: true
  }

  export type ContratoVeiculoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContratoVeiculo to aggregate.
     */
    where?: ContratoVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoVeiculos to fetch.
     */
    orderBy?: ContratoVeiculoOrderByWithRelationInput | ContratoVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContratoVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoVeiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContratoVeiculos
    **/
    _count?: true | ContratoVeiculoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContratoVeiculoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContratoVeiculoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContratoVeiculoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContratoVeiculoMaxAggregateInputType
  }

  export type GetContratoVeiculoAggregateType<T extends ContratoVeiculoAggregateArgs> = {
        [P in keyof T & keyof AggregateContratoVeiculo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContratoVeiculo[P]>
      : GetScalarType<T[P], AggregateContratoVeiculo[P]>
  }




  export type ContratoVeiculoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoVeiculoWhereInput
    orderBy?: ContratoVeiculoOrderByWithAggregationInput | ContratoVeiculoOrderByWithAggregationInput[]
    by: ContratoVeiculoScalarFieldEnum[] | ContratoVeiculoScalarFieldEnum
    having?: ContratoVeiculoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContratoVeiculoCountAggregateInputType | true
    _avg?: ContratoVeiculoAvgAggregateInputType
    _sum?: ContratoVeiculoSumAggregateInputType
    _min?: ContratoVeiculoMinAggregateInputType
    _max?: ContratoVeiculoMaxAggregateInputType
  }

  export type ContratoVeiculoGroupByOutputType = {
    id: number
    contratoLocacaoId: number
    veiculoId: number
    _count: ContratoVeiculoCountAggregateOutputType | null
    _avg: ContratoVeiculoAvgAggregateOutputType | null
    _sum: ContratoVeiculoSumAggregateOutputType | null
    _min: ContratoVeiculoMinAggregateOutputType | null
    _max: ContratoVeiculoMaxAggregateOutputType | null
  }

  type GetContratoVeiculoGroupByPayload<T extends ContratoVeiculoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContratoVeiculoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContratoVeiculoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContratoVeiculoGroupByOutputType[P]>
            : GetScalarType<T[P], ContratoVeiculoGroupByOutputType[P]>
        }
      >
    >


  export type ContratoVeiculoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contratoLocacaoId?: boolean
    veiculoId?: boolean
    contratoLocacao?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contratoVeiculo"]>

  export type ContratoVeiculoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contratoLocacaoId?: boolean
    veiculoId?: boolean
    contratoLocacao?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contratoVeiculo"]>

  export type ContratoVeiculoSelectScalar = {
    id?: boolean
    contratoLocacaoId?: boolean
    veiculoId?: boolean
  }

  export type ContratoVeiculoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contratoLocacao?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }
  export type ContratoVeiculoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contratoLocacao?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }

  export type $ContratoVeiculoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContratoVeiculo"
    objects: {
      contratoLocacao: Prisma.$ContratoLocacaoPayload<ExtArgs>
      veiculo: Prisma.$VeiculoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      contratoLocacaoId: number
      veiculoId: number
    }, ExtArgs["result"]["contratoVeiculo"]>
    composites: {}
  }

  type ContratoVeiculoGetPayload<S extends boolean | null | undefined | ContratoVeiculoDefaultArgs> = $Result.GetResult<Prisma.$ContratoVeiculoPayload, S>

  type ContratoVeiculoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContratoVeiculoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContratoVeiculoCountAggregateInputType | true
    }

  export interface ContratoVeiculoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContratoVeiculo'], meta: { name: 'ContratoVeiculo' } }
    /**
     * Find zero or one ContratoVeiculo that matches the filter.
     * @param {ContratoVeiculoFindUniqueArgs} args - Arguments to find a ContratoVeiculo
     * @example
     * // Get one ContratoVeiculo
     * const contratoVeiculo = await prisma.contratoVeiculo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContratoVeiculoFindUniqueArgs>(args: SelectSubset<T, ContratoVeiculoFindUniqueArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContratoVeiculo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContratoVeiculoFindUniqueOrThrowArgs} args - Arguments to find a ContratoVeiculo
     * @example
     * // Get one ContratoVeiculo
     * const contratoVeiculo = await prisma.contratoVeiculo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContratoVeiculoFindUniqueOrThrowArgs>(args: SelectSubset<T, ContratoVeiculoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContratoVeiculo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoVeiculoFindFirstArgs} args - Arguments to find a ContratoVeiculo
     * @example
     * // Get one ContratoVeiculo
     * const contratoVeiculo = await prisma.contratoVeiculo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContratoVeiculoFindFirstArgs>(args?: SelectSubset<T, ContratoVeiculoFindFirstArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContratoVeiculo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoVeiculoFindFirstOrThrowArgs} args - Arguments to find a ContratoVeiculo
     * @example
     * // Get one ContratoVeiculo
     * const contratoVeiculo = await prisma.contratoVeiculo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContratoVeiculoFindFirstOrThrowArgs>(args?: SelectSubset<T, ContratoVeiculoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContratoVeiculos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoVeiculoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContratoVeiculos
     * const contratoVeiculos = await prisma.contratoVeiculo.findMany()
     * 
     * // Get first 10 ContratoVeiculos
     * const contratoVeiculos = await prisma.contratoVeiculo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contratoVeiculoWithIdOnly = await prisma.contratoVeiculo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContratoVeiculoFindManyArgs>(args?: SelectSubset<T, ContratoVeiculoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContratoVeiculo.
     * @param {ContratoVeiculoCreateArgs} args - Arguments to create a ContratoVeiculo.
     * @example
     * // Create one ContratoVeiculo
     * const ContratoVeiculo = await prisma.contratoVeiculo.create({
     *   data: {
     *     // ... data to create a ContratoVeiculo
     *   }
     * })
     * 
     */
    create<T extends ContratoVeiculoCreateArgs>(args: SelectSubset<T, ContratoVeiculoCreateArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContratoVeiculos.
     * @param {ContratoVeiculoCreateManyArgs} args - Arguments to create many ContratoVeiculos.
     * @example
     * // Create many ContratoVeiculos
     * const contratoVeiculo = await prisma.contratoVeiculo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContratoVeiculoCreateManyArgs>(args?: SelectSubset<T, ContratoVeiculoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContratoVeiculos and returns the data saved in the database.
     * @param {ContratoVeiculoCreateManyAndReturnArgs} args - Arguments to create many ContratoVeiculos.
     * @example
     * // Create many ContratoVeiculos
     * const contratoVeiculo = await prisma.contratoVeiculo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContratoVeiculos and only return the `id`
     * const contratoVeiculoWithIdOnly = await prisma.contratoVeiculo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContratoVeiculoCreateManyAndReturnArgs>(args?: SelectSubset<T, ContratoVeiculoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContratoVeiculo.
     * @param {ContratoVeiculoDeleteArgs} args - Arguments to delete one ContratoVeiculo.
     * @example
     * // Delete one ContratoVeiculo
     * const ContratoVeiculo = await prisma.contratoVeiculo.delete({
     *   where: {
     *     // ... filter to delete one ContratoVeiculo
     *   }
     * })
     * 
     */
    delete<T extends ContratoVeiculoDeleteArgs>(args: SelectSubset<T, ContratoVeiculoDeleteArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContratoVeiculo.
     * @param {ContratoVeiculoUpdateArgs} args - Arguments to update one ContratoVeiculo.
     * @example
     * // Update one ContratoVeiculo
     * const contratoVeiculo = await prisma.contratoVeiculo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContratoVeiculoUpdateArgs>(args: SelectSubset<T, ContratoVeiculoUpdateArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContratoVeiculos.
     * @param {ContratoVeiculoDeleteManyArgs} args - Arguments to filter ContratoVeiculos to delete.
     * @example
     * // Delete a few ContratoVeiculos
     * const { count } = await prisma.contratoVeiculo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContratoVeiculoDeleteManyArgs>(args?: SelectSubset<T, ContratoVeiculoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContratoVeiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoVeiculoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContratoVeiculos
     * const contratoVeiculo = await prisma.contratoVeiculo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContratoVeiculoUpdateManyArgs>(args: SelectSubset<T, ContratoVeiculoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContratoVeiculo.
     * @param {ContratoVeiculoUpsertArgs} args - Arguments to update or create a ContratoVeiculo.
     * @example
     * // Update or create a ContratoVeiculo
     * const contratoVeiculo = await prisma.contratoVeiculo.upsert({
     *   create: {
     *     // ... data to create a ContratoVeiculo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContratoVeiculo we want to update
     *   }
     * })
     */
    upsert<T extends ContratoVeiculoUpsertArgs>(args: SelectSubset<T, ContratoVeiculoUpsertArgs<ExtArgs>>): Prisma__ContratoVeiculoClient<$Result.GetResult<Prisma.$ContratoVeiculoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContratoVeiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoVeiculoCountArgs} args - Arguments to filter ContratoVeiculos to count.
     * @example
     * // Count the number of ContratoVeiculos
     * const count = await prisma.contratoVeiculo.count({
     *   where: {
     *     // ... the filter for the ContratoVeiculos we want to count
     *   }
     * })
    **/
    count<T extends ContratoVeiculoCountArgs>(
      args?: Subset<T, ContratoVeiculoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContratoVeiculoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContratoVeiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoVeiculoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContratoVeiculoAggregateArgs>(args: Subset<T, ContratoVeiculoAggregateArgs>): Prisma.PrismaPromise<GetContratoVeiculoAggregateType<T>>

    /**
     * Group by ContratoVeiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoVeiculoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContratoVeiculoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContratoVeiculoGroupByArgs['orderBy'] }
        : { orderBy?: ContratoVeiculoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContratoVeiculoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContratoVeiculoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContratoVeiculo model
   */
  readonly fields: ContratoVeiculoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContratoVeiculo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContratoVeiculoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contratoLocacao<T extends ContratoLocacaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacaoDefaultArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    veiculo<T extends VeiculoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VeiculoDefaultArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContratoVeiculo model
   */ 
  interface ContratoVeiculoFieldRefs {
    readonly id: FieldRef<"ContratoVeiculo", 'Int'>
    readonly contratoLocacaoId: FieldRef<"ContratoVeiculo", 'Int'>
    readonly veiculoId: FieldRef<"ContratoVeiculo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ContratoVeiculo findUnique
   */
  export type ContratoVeiculoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoVeiculo to fetch.
     */
    where: ContratoVeiculoWhereUniqueInput
  }

  /**
   * ContratoVeiculo findUniqueOrThrow
   */
  export type ContratoVeiculoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoVeiculo to fetch.
     */
    where: ContratoVeiculoWhereUniqueInput
  }

  /**
   * ContratoVeiculo findFirst
   */
  export type ContratoVeiculoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoVeiculo to fetch.
     */
    where?: ContratoVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoVeiculos to fetch.
     */
    orderBy?: ContratoVeiculoOrderByWithRelationInput | ContratoVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContratoVeiculos.
     */
    cursor?: ContratoVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoVeiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContratoVeiculos.
     */
    distinct?: ContratoVeiculoScalarFieldEnum | ContratoVeiculoScalarFieldEnum[]
  }

  /**
   * ContratoVeiculo findFirstOrThrow
   */
  export type ContratoVeiculoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoVeiculo to fetch.
     */
    where?: ContratoVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoVeiculos to fetch.
     */
    orderBy?: ContratoVeiculoOrderByWithRelationInput | ContratoVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContratoVeiculos.
     */
    cursor?: ContratoVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoVeiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContratoVeiculos.
     */
    distinct?: ContratoVeiculoScalarFieldEnum | ContratoVeiculoScalarFieldEnum[]
  }

  /**
   * ContratoVeiculo findMany
   */
  export type ContratoVeiculoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoVeiculos to fetch.
     */
    where?: ContratoVeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoVeiculos to fetch.
     */
    orderBy?: ContratoVeiculoOrderByWithRelationInput | ContratoVeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContratoVeiculos.
     */
    cursor?: ContratoVeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoVeiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoVeiculos.
     */
    skip?: number
    distinct?: ContratoVeiculoScalarFieldEnum | ContratoVeiculoScalarFieldEnum[]
  }

  /**
   * ContratoVeiculo create
   */
  export type ContratoVeiculoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * The data needed to create a ContratoVeiculo.
     */
    data: XOR<ContratoVeiculoCreateInput, ContratoVeiculoUncheckedCreateInput>
  }

  /**
   * ContratoVeiculo createMany
   */
  export type ContratoVeiculoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContratoVeiculos.
     */
    data: ContratoVeiculoCreateManyInput | ContratoVeiculoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContratoVeiculo createManyAndReturn
   */
  export type ContratoVeiculoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContratoVeiculos.
     */
    data: ContratoVeiculoCreateManyInput | ContratoVeiculoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContratoVeiculo update
   */
  export type ContratoVeiculoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * The data needed to update a ContratoVeiculo.
     */
    data: XOR<ContratoVeiculoUpdateInput, ContratoVeiculoUncheckedUpdateInput>
    /**
     * Choose, which ContratoVeiculo to update.
     */
    where: ContratoVeiculoWhereUniqueInput
  }

  /**
   * ContratoVeiculo updateMany
   */
  export type ContratoVeiculoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContratoVeiculos.
     */
    data: XOR<ContratoVeiculoUpdateManyMutationInput, ContratoVeiculoUncheckedUpdateManyInput>
    /**
     * Filter which ContratoVeiculos to update
     */
    where?: ContratoVeiculoWhereInput
  }

  /**
   * ContratoVeiculo upsert
   */
  export type ContratoVeiculoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * The filter to search for the ContratoVeiculo to update in case it exists.
     */
    where: ContratoVeiculoWhereUniqueInput
    /**
     * In case the ContratoVeiculo found by the `where` argument doesn't exist, create a new ContratoVeiculo with this data.
     */
    create: XOR<ContratoVeiculoCreateInput, ContratoVeiculoUncheckedCreateInput>
    /**
     * In case the ContratoVeiculo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContratoVeiculoUpdateInput, ContratoVeiculoUncheckedUpdateInput>
  }

  /**
   * ContratoVeiculo delete
   */
  export type ContratoVeiculoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
    /**
     * Filter which ContratoVeiculo to delete.
     */
    where: ContratoVeiculoWhereUniqueInput
  }

  /**
   * ContratoVeiculo deleteMany
   */
  export type ContratoVeiculoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContratoVeiculos to delete
     */
    where?: ContratoVeiculoWhereInput
  }

  /**
   * ContratoVeiculo without action
   */
  export type ContratoVeiculoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoVeiculo
     */
    select?: ContratoVeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoVeiculoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    password: 'password'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const MarcaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type MarcaScalarFieldEnum = (typeof MarcaScalarFieldEnum)[keyof typeof MarcaScalarFieldEnum]


  export const ModeloScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type ModeloScalarFieldEnum = (typeof ModeloScalarFieldEnum)[keyof typeof ModeloScalarFieldEnum]


  export const VeiculoScalarFieldEnum: {
    id: 'id',
    placa: 'placa',
    chassi: 'chassi',
    anoFabricacao: 'anoFabricacao',
    cor: 'cor',
    status: 'status',
    marcaId: 'marcaId',
    modeloId: 'modeloId'
  };

  export type VeiculoScalarFieldEnum = (typeof VeiculoScalarFieldEnum)[keyof typeof VeiculoScalarFieldEnum]


  export const ContratoLocacaoScalarFieldEnum: {
    id: 'id',
    status: 'status'
  };

  export type ContratoLocacaoScalarFieldEnum = (typeof ContratoLocacaoScalarFieldEnum)[keyof typeof ContratoLocacaoScalarFieldEnum]


  export const OcorrenciaScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    contratoId: 'contratoId'
  };

  export type OcorrenciaScalarFieldEnum = (typeof OcorrenciaScalarFieldEnum)[keyof typeof OcorrenciaScalarFieldEnum]


  export const ContratoVeiculoScalarFieldEnum: {
    id: 'id',
    contratoLocacaoId: 'contratoLocacaoId',
    veiculoId: 'veiculoId'
  };

  export type ContratoVeiculoScalarFieldEnum = (typeof ContratoVeiculoScalarFieldEnum)[keyof typeof ContratoVeiculoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    email?: StringFilter<"Cliente"> | string
    password?: StringFilter<"Cliente"> | string
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nome?: StringFilter<"Cliente"> | string
    password?: StringFilter<"Cliente"> | string
  }, "id" | "email">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nome?: StringWithAggregatesFilter<"Cliente"> | string
    email?: StringWithAggregatesFilter<"Cliente"> | string
    password?: StringWithAggregatesFilter<"Cliente"> | string
  }

  export type MarcaWhereInput = {
    AND?: MarcaWhereInput | MarcaWhereInput[]
    OR?: MarcaWhereInput[]
    NOT?: MarcaWhereInput | MarcaWhereInput[]
    id?: IntFilter<"Marca"> | number
    nome?: StringFilter<"Marca"> | string
    veiculos?: VeiculoListRelationFilter
  }

  export type MarcaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    veiculos?: VeiculoOrderByRelationAggregateInput
  }

  export type MarcaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MarcaWhereInput | MarcaWhereInput[]
    OR?: MarcaWhereInput[]
    NOT?: MarcaWhereInput | MarcaWhereInput[]
    nome?: StringFilter<"Marca"> | string
    veiculos?: VeiculoListRelationFilter
  }, "id">

  export type MarcaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: MarcaCountOrderByAggregateInput
    _avg?: MarcaAvgOrderByAggregateInput
    _max?: MarcaMaxOrderByAggregateInput
    _min?: MarcaMinOrderByAggregateInput
    _sum?: MarcaSumOrderByAggregateInput
  }

  export type MarcaScalarWhereWithAggregatesInput = {
    AND?: MarcaScalarWhereWithAggregatesInput | MarcaScalarWhereWithAggregatesInput[]
    OR?: MarcaScalarWhereWithAggregatesInput[]
    NOT?: MarcaScalarWhereWithAggregatesInput | MarcaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Marca"> | number
    nome?: StringWithAggregatesFilter<"Marca"> | string
  }

  export type ModeloWhereInput = {
    AND?: ModeloWhereInput | ModeloWhereInput[]
    OR?: ModeloWhereInput[]
    NOT?: ModeloWhereInput | ModeloWhereInput[]
    id?: IntFilter<"Modelo"> | number
    nome?: StringFilter<"Modelo"> | string
    veiculos?: VeiculoListRelationFilter
  }

  export type ModeloOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    veiculos?: VeiculoOrderByRelationAggregateInput
  }

  export type ModeloWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ModeloWhereInput | ModeloWhereInput[]
    OR?: ModeloWhereInput[]
    NOT?: ModeloWhereInput | ModeloWhereInput[]
    nome?: StringFilter<"Modelo"> | string
    veiculos?: VeiculoListRelationFilter
  }, "id">

  export type ModeloOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: ModeloCountOrderByAggregateInput
    _avg?: ModeloAvgOrderByAggregateInput
    _max?: ModeloMaxOrderByAggregateInput
    _min?: ModeloMinOrderByAggregateInput
    _sum?: ModeloSumOrderByAggregateInput
  }

  export type ModeloScalarWhereWithAggregatesInput = {
    AND?: ModeloScalarWhereWithAggregatesInput | ModeloScalarWhereWithAggregatesInput[]
    OR?: ModeloScalarWhereWithAggregatesInput[]
    NOT?: ModeloScalarWhereWithAggregatesInput | ModeloScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Modelo"> | number
    nome?: StringWithAggregatesFilter<"Modelo"> | string
  }

  export type VeiculoWhereInput = {
    AND?: VeiculoWhereInput | VeiculoWhereInput[]
    OR?: VeiculoWhereInput[]
    NOT?: VeiculoWhereInput | VeiculoWhereInput[]
    id?: IntFilter<"Veiculo"> | number
    placa?: StringFilter<"Veiculo"> | string
    chassi?: StringFilter<"Veiculo"> | string
    anoFabricacao?: DateTimeFilter<"Veiculo"> | Date | string
    cor?: StringFilter<"Veiculo"> | string
    status?: StringFilter<"Veiculo"> | string
    marcaId?: IntFilter<"Veiculo"> | number
    modeloId?: IntFilter<"Veiculo"> | number
    marca?: XOR<MarcaScalarRelationFilter, MarcaWhereInput>
    modelo?: XOR<ModeloScalarRelationFilter, ModeloWhereInput>
    contratos?: ContratoVeiculoListRelationFilter
  }

  export type VeiculoOrderByWithRelationInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    marcaId?: SortOrder
    modeloId?: SortOrder
    marca?: MarcaOrderByWithRelationInput
    modelo?: ModeloOrderByWithRelationInput
    contratos?: ContratoVeiculoOrderByRelationAggregateInput
  }

  export type VeiculoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    placa?: string
    chassi?: string
    AND?: VeiculoWhereInput | VeiculoWhereInput[]
    OR?: VeiculoWhereInput[]
    NOT?: VeiculoWhereInput | VeiculoWhereInput[]
    anoFabricacao?: DateTimeFilter<"Veiculo"> | Date | string
    cor?: StringFilter<"Veiculo"> | string
    status?: StringFilter<"Veiculo"> | string
    marcaId?: IntFilter<"Veiculo"> | number
    modeloId?: IntFilter<"Veiculo"> | number
    marca?: XOR<MarcaScalarRelationFilter, MarcaWhereInput>
    modelo?: XOR<ModeloScalarRelationFilter, ModeloWhereInput>
    contratos?: ContratoVeiculoListRelationFilter
  }, "id" | "placa" | "chassi">

  export type VeiculoOrderByWithAggregationInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    marcaId?: SortOrder
    modeloId?: SortOrder
    _count?: VeiculoCountOrderByAggregateInput
    _avg?: VeiculoAvgOrderByAggregateInput
    _max?: VeiculoMaxOrderByAggregateInput
    _min?: VeiculoMinOrderByAggregateInput
    _sum?: VeiculoSumOrderByAggregateInput
  }

  export type VeiculoScalarWhereWithAggregatesInput = {
    AND?: VeiculoScalarWhereWithAggregatesInput | VeiculoScalarWhereWithAggregatesInput[]
    OR?: VeiculoScalarWhereWithAggregatesInput[]
    NOT?: VeiculoScalarWhereWithAggregatesInput | VeiculoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Veiculo"> | number
    placa?: StringWithAggregatesFilter<"Veiculo"> | string
    chassi?: StringWithAggregatesFilter<"Veiculo"> | string
    anoFabricacao?: DateTimeWithAggregatesFilter<"Veiculo"> | Date | string
    cor?: StringWithAggregatesFilter<"Veiculo"> | string
    status?: StringWithAggregatesFilter<"Veiculo"> | string
    marcaId?: IntWithAggregatesFilter<"Veiculo"> | number
    modeloId?: IntWithAggregatesFilter<"Veiculo"> | number
  }

  export type ContratoLocacaoWhereInput = {
    AND?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    OR?: ContratoLocacaoWhereInput[]
    NOT?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    id?: IntFilter<"ContratoLocacao"> | number
    status?: StringFilter<"ContratoLocacao"> | string
    veiculos?: ContratoVeiculoListRelationFilter
    ocorrencias?: OcorrenciaListRelationFilter
  }

  export type ContratoLocacaoOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    veiculos?: ContratoVeiculoOrderByRelationAggregateInput
    ocorrencias?: OcorrenciaOrderByRelationAggregateInput
  }

  export type ContratoLocacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    OR?: ContratoLocacaoWhereInput[]
    NOT?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    status?: StringFilter<"ContratoLocacao"> | string
    veiculos?: ContratoVeiculoListRelationFilter
    ocorrencias?: OcorrenciaListRelationFilter
  }, "id">

  export type ContratoLocacaoOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    _count?: ContratoLocacaoCountOrderByAggregateInput
    _avg?: ContratoLocacaoAvgOrderByAggregateInput
    _max?: ContratoLocacaoMaxOrderByAggregateInput
    _min?: ContratoLocacaoMinOrderByAggregateInput
    _sum?: ContratoLocacaoSumOrderByAggregateInput
  }

  export type ContratoLocacaoScalarWhereWithAggregatesInput = {
    AND?: ContratoLocacaoScalarWhereWithAggregatesInput | ContratoLocacaoScalarWhereWithAggregatesInput[]
    OR?: ContratoLocacaoScalarWhereWithAggregatesInput[]
    NOT?: ContratoLocacaoScalarWhereWithAggregatesInput | ContratoLocacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContratoLocacao"> | number
    status?: StringWithAggregatesFilter<"ContratoLocacao"> | string
  }

  export type OcorrenciaWhereInput = {
    AND?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    OR?: OcorrenciaWhereInput[]
    NOT?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    id?: IntFilter<"Ocorrencia"> | number
    descricao?: StringFilter<"Ocorrencia"> | string
    contratoId?: IntNullableFilter<"Ocorrencia"> | number | null
    contratoLocacao?: XOR<ContratoLocacaoNullableScalarRelationFilter, ContratoLocacaoWhereInput> | null
  }

  export type OcorrenciaOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    contratoId?: SortOrderInput | SortOrder
    contratoLocacao?: ContratoLocacaoOrderByWithRelationInput
  }

  export type OcorrenciaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    OR?: OcorrenciaWhereInput[]
    NOT?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    descricao?: StringFilter<"Ocorrencia"> | string
    contratoId?: IntNullableFilter<"Ocorrencia"> | number | null
    contratoLocacao?: XOR<ContratoLocacaoNullableScalarRelationFilter, ContratoLocacaoWhereInput> | null
  }, "id">

  export type OcorrenciaOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    contratoId?: SortOrderInput | SortOrder
    _count?: OcorrenciaCountOrderByAggregateInput
    _avg?: OcorrenciaAvgOrderByAggregateInput
    _max?: OcorrenciaMaxOrderByAggregateInput
    _min?: OcorrenciaMinOrderByAggregateInput
    _sum?: OcorrenciaSumOrderByAggregateInput
  }

  export type OcorrenciaScalarWhereWithAggregatesInput = {
    AND?: OcorrenciaScalarWhereWithAggregatesInput | OcorrenciaScalarWhereWithAggregatesInput[]
    OR?: OcorrenciaScalarWhereWithAggregatesInput[]
    NOT?: OcorrenciaScalarWhereWithAggregatesInput | OcorrenciaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ocorrencia"> | number
    descricao?: StringWithAggregatesFilter<"Ocorrencia"> | string
    contratoId?: IntNullableWithAggregatesFilter<"Ocorrencia"> | number | null
  }

  export type ContratoVeiculoWhereInput = {
    AND?: ContratoVeiculoWhereInput | ContratoVeiculoWhereInput[]
    OR?: ContratoVeiculoWhereInput[]
    NOT?: ContratoVeiculoWhereInput | ContratoVeiculoWhereInput[]
    id?: IntFilter<"ContratoVeiculo"> | number
    contratoLocacaoId?: IntFilter<"ContratoVeiculo"> | number
    veiculoId?: IntFilter<"ContratoVeiculo"> | number
    contratoLocacao?: XOR<ContratoLocacaoScalarRelationFilter, ContratoLocacaoWhereInput>
    veiculo?: XOR<VeiculoScalarRelationFilter, VeiculoWhereInput>
  }

  export type ContratoVeiculoOrderByWithRelationInput = {
    id?: SortOrder
    contratoLocacaoId?: SortOrder
    veiculoId?: SortOrder
    contratoLocacao?: ContratoLocacaoOrderByWithRelationInput
    veiculo?: VeiculoOrderByWithRelationInput
  }

  export type ContratoVeiculoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    contratoLocacaoId_veiculoId?: ContratoVeiculoContratoLocacaoIdVeiculoIdCompoundUniqueInput
    AND?: ContratoVeiculoWhereInput | ContratoVeiculoWhereInput[]
    OR?: ContratoVeiculoWhereInput[]
    NOT?: ContratoVeiculoWhereInput | ContratoVeiculoWhereInput[]
    contratoLocacaoId?: IntFilter<"ContratoVeiculo"> | number
    veiculoId?: IntFilter<"ContratoVeiculo"> | number
    contratoLocacao?: XOR<ContratoLocacaoScalarRelationFilter, ContratoLocacaoWhereInput>
    veiculo?: XOR<VeiculoScalarRelationFilter, VeiculoWhereInput>
  }, "id" | "contratoLocacaoId_veiculoId">

  export type ContratoVeiculoOrderByWithAggregationInput = {
    id?: SortOrder
    contratoLocacaoId?: SortOrder
    veiculoId?: SortOrder
    _count?: ContratoVeiculoCountOrderByAggregateInput
    _avg?: ContratoVeiculoAvgOrderByAggregateInput
    _max?: ContratoVeiculoMaxOrderByAggregateInput
    _min?: ContratoVeiculoMinOrderByAggregateInput
    _sum?: ContratoVeiculoSumOrderByAggregateInput
  }

  export type ContratoVeiculoScalarWhereWithAggregatesInput = {
    AND?: ContratoVeiculoScalarWhereWithAggregatesInput | ContratoVeiculoScalarWhereWithAggregatesInput[]
    OR?: ContratoVeiculoScalarWhereWithAggregatesInput[]
    NOT?: ContratoVeiculoScalarWhereWithAggregatesInput | ContratoVeiculoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContratoVeiculo"> | number
    contratoLocacaoId?: IntWithAggregatesFilter<"ContratoVeiculo"> | number
    veiculoId?: IntWithAggregatesFilter<"ContratoVeiculo"> | number
  }

  export type ClienteCreateInput = {
    nome: string
    email: string
    password: string
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    password: string
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    email: string
    password: string
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type MarcaCreateInput = {
    nome: string
    veiculos?: VeiculoCreateNestedManyWithoutMarcaInput
  }

  export type MarcaUncheckedCreateInput = {
    id?: number
    nome: string
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutMarcaInput
  }

  export type MarcaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUpdateManyWithoutMarcaNestedInput
  }

  export type MarcaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUncheckedUpdateManyWithoutMarcaNestedInput
  }

  export type MarcaCreateManyInput = {
    id?: number
    nome: string
  }

  export type MarcaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MarcaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloCreateInput = {
    nome: string
    veiculos?: VeiculoCreateNestedManyWithoutModeloInput
  }

  export type ModeloUncheckedCreateInput = {
    id?: number
    nome: string
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutModeloInput
  }

  export type ModeloUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUpdateManyWithoutModeloNestedInput
  }

  export type ModeloUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUncheckedUpdateManyWithoutModeloNestedInput
  }

  export type ModeloCreateManyInput = {
    id?: number
    nome: string
  }

  export type ModeloUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type VeiculoCreateInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marca: MarcaCreateNestedOneWithoutVeiculosInput
    modelo: ModeloCreateNestedOneWithoutVeiculosInput
    contratos?: ContratoVeiculoCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoUncheckedCreateInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marcaId: number
    modeloId: number
    contratos?: ContratoVeiculoUncheckedCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoUpdateInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marca?: MarcaUpdateOneRequiredWithoutVeiculosNestedInput
    modelo?: ModeloUpdateOneRequiredWithoutVeiculosNestedInput
    contratos?: ContratoVeiculoUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marcaId?: IntFieldUpdateOperationsInput | number
    modeloId?: IntFieldUpdateOperationsInput | number
    contratos?: ContratoVeiculoUncheckedUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoCreateManyInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marcaId: number
    modeloId: number
  }

  export type VeiculoUpdateManyMutationInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type VeiculoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marcaId?: IntFieldUpdateOperationsInput | number
    modeloId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratoLocacaoCreateInput = {
    status: string
    veiculos?: ContratoVeiculoCreateNestedManyWithoutContratoLocacaoInput
    ocorrencias?: OcorrenciaCreateNestedManyWithoutContratoLocacaoInput
  }

  export type ContratoLocacaoUncheckedCreateInput = {
    id?: number
    status: string
    veiculos?: ContratoVeiculoUncheckedCreateNestedManyWithoutContratoLocacaoInput
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutContratoLocacaoInput
  }

  export type ContratoLocacaoUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: ContratoVeiculoUpdateManyWithoutContratoLocacaoNestedInput
    ocorrencias?: OcorrenciaUpdateManyWithoutContratoLocacaoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: ContratoVeiculoUncheckedUpdateManyWithoutContratoLocacaoNestedInput
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutContratoLocacaoNestedInput
  }

  export type ContratoLocacaoCreateManyInput = {
    id?: number
    status: string
  }

  export type ContratoLocacaoUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ContratoLocacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type OcorrenciaCreateInput = {
    descricao: string
    contratoLocacao?: ContratoLocacaoCreateNestedOneWithoutOcorrenciasInput
  }

  export type OcorrenciaUncheckedCreateInput = {
    id?: number
    descricao: string
    contratoId?: number | null
  }

  export type OcorrenciaUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    contratoLocacao?: ContratoLocacaoUpdateOneWithoutOcorrenciasNestedInput
  }

  export type OcorrenciaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    contratoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OcorrenciaCreateManyInput = {
    id?: number
    descricao: string
    contratoId?: number | null
  }

  export type OcorrenciaUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type OcorrenciaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    contratoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContratoVeiculoCreateInput = {
    contratoLocacao: ContratoLocacaoCreateNestedOneWithoutVeiculosInput
    veiculo: VeiculoCreateNestedOneWithoutContratosInput
  }

  export type ContratoVeiculoUncheckedCreateInput = {
    id?: number
    contratoLocacaoId: number
    veiculoId: number
  }

  export type ContratoVeiculoUpdateInput = {
    contratoLocacao?: ContratoLocacaoUpdateOneRequiredWithoutVeiculosNestedInput
    veiculo?: VeiculoUpdateOneRequiredWithoutContratosNestedInput
  }

  export type ContratoVeiculoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoLocacaoId?: IntFieldUpdateOperationsInput | number
    veiculoId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratoVeiculoCreateManyInput = {
    id?: number
    contratoLocacaoId: number
    veiculoId: number
  }

  export type ContratoVeiculoUpdateManyMutationInput = {

  }

  export type ContratoVeiculoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoLocacaoId?: IntFieldUpdateOperationsInput | number
    veiculoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type VeiculoListRelationFilter = {
    every?: VeiculoWhereInput
    some?: VeiculoWhereInput
    none?: VeiculoWhereInput
  }

  export type VeiculoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarcaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type MarcaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MarcaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type MarcaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type MarcaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ModeloCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ModeloAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ModeloMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ModeloMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ModeloSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MarcaScalarRelationFilter = {
    is?: MarcaWhereInput
    isNot?: MarcaWhereInput
  }

  export type ModeloScalarRelationFilter = {
    is?: ModeloWhereInput
    isNot?: ModeloWhereInput
  }

  export type ContratoVeiculoListRelationFilter = {
    every?: ContratoVeiculoWhereInput
    some?: ContratoVeiculoWhereInput
    none?: ContratoVeiculoWhereInput
  }

  export type ContratoVeiculoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VeiculoCountOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    marcaId?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoAvgOrderByAggregateInput = {
    id?: SortOrder
    marcaId?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoMaxOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    marcaId?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoMinOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    marcaId?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoSumOrderByAggregateInput = {
    id?: SortOrder
    marcaId?: SortOrder
    modeloId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type OcorrenciaListRelationFilter = {
    every?: OcorrenciaWhereInput
    some?: OcorrenciaWhereInput
    none?: OcorrenciaWhereInput
  }

  export type OcorrenciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContratoLocacaoCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ContratoLocacaoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContratoLocacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ContratoLocacaoMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ContratoLocacaoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ContratoLocacaoNullableScalarRelationFilter = {
    is?: ContratoLocacaoWhereInput | null
    isNot?: ContratoLocacaoWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OcorrenciaCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaSumOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ContratoLocacaoScalarRelationFilter = {
    is?: ContratoLocacaoWhereInput
    isNot?: ContratoLocacaoWhereInput
  }

  export type VeiculoScalarRelationFilter = {
    is?: VeiculoWhereInput
    isNot?: VeiculoWhereInput
  }

  export type ContratoVeiculoContratoLocacaoIdVeiculoIdCompoundUniqueInput = {
    contratoLocacaoId: number
    veiculoId: number
  }

  export type ContratoVeiculoCountOrderByAggregateInput = {
    id?: SortOrder
    contratoLocacaoId?: SortOrder
    veiculoId?: SortOrder
  }

  export type ContratoVeiculoAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoLocacaoId?: SortOrder
    veiculoId?: SortOrder
  }

  export type ContratoVeiculoMaxOrderByAggregateInput = {
    id?: SortOrder
    contratoLocacaoId?: SortOrder
    veiculoId?: SortOrder
  }

  export type ContratoVeiculoMinOrderByAggregateInput = {
    id?: SortOrder
    contratoLocacaoId?: SortOrder
    veiculoId?: SortOrder
  }

  export type ContratoVeiculoSumOrderByAggregateInput = {
    id?: SortOrder
    contratoLocacaoId?: SortOrder
    veiculoId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VeiculoCreateNestedManyWithoutMarcaInput = {
    create?: XOR<VeiculoCreateWithoutMarcaInput, VeiculoUncheckedCreateWithoutMarcaInput> | VeiculoCreateWithoutMarcaInput[] | VeiculoUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutMarcaInput | VeiculoCreateOrConnectWithoutMarcaInput[]
    createMany?: VeiculoCreateManyMarcaInputEnvelope
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type VeiculoUncheckedCreateNestedManyWithoutMarcaInput = {
    create?: XOR<VeiculoCreateWithoutMarcaInput, VeiculoUncheckedCreateWithoutMarcaInput> | VeiculoCreateWithoutMarcaInput[] | VeiculoUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutMarcaInput | VeiculoCreateOrConnectWithoutMarcaInput[]
    createMany?: VeiculoCreateManyMarcaInputEnvelope
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type VeiculoUpdateManyWithoutMarcaNestedInput = {
    create?: XOR<VeiculoCreateWithoutMarcaInput, VeiculoUncheckedCreateWithoutMarcaInput> | VeiculoCreateWithoutMarcaInput[] | VeiculoUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutMarcaInput | VeiculoCreateOrConnectWithoutMarcaInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutMarcaInput | VeiculoUpsertWithWhereUniqueWithoutMarcaInput[]
    createMany?: VeiculoCreateManyMarcaInputEnvelope
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutMarcaInput | VeiculoUpdateWithWhereUniqueWithoutMarcaInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutMarcaInput | VeiculoUpdateManyWithWhereWithoutMarcaInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type VeiculoUncheckedUpdateManyWithoutMarcaNestedInput = {
    create?: XOR<VeiculoCreateWithoutMarcaInput, VeiculoUncheckedCreateWithoutMarcaInput> | VeiculoCreateWithoutMarcaInput[] | VeiculoUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutMarcaInput | VeiculoCreateOrConnectWithoutMarcaInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutMarcaInput | VeiculoUpsertWithWhereUniqueWithoutMarcaInput[]
    createMany?: VeiculoCreateManyMarcaInputEnvelope
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutMarcaInput | VeiculoUpdateWithWhereUniqueWithoutMarcaInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutMarcaInput | VeiculoUpdateManyWithWhereWithoutMarcaInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type VeiculoCreateNestedManyWithoutModeloInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type VeiculoUncheckedCreateNestedManyWithoutModeloInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type VeiculoUpdateManyWithoutModeloNestedInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutModeloInput | VeiculoUpsertWithWhereUniqueWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutModeloInput | VeiculoUpdateWithWhereUniqueWithoutModeloInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutModeloInput | VeiculoUpdateManyWithWhereWithoutModeloInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type VeiculoUncheckedUpdateManyWithoutModeloNestedInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutModeloInput | VeiculoUpsertWithWhereUniqueWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutModeloInput | VeiculoUpdateWithWhereUniqueWithoutModeloInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutModeloInput | VeiculoUpdateManyWithWhereWithoutModeloInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type MarcaCreateNestedOneWithoutVeiculosInput = {
    create?: XOR<MarcaCreateWithoutVeiculosInput, MarcaUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: MarcaCreateOrConnectWithoutVeiculosInput
    connect?: MarcaWhereUniqueInput
  }

  export type ModeloCreateNestedOneWithoutVeiculosInput = {
    create?: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: ModeloCreateOrConnectWithoutVeiculosInput
    connect?: ModeloWhereUniqueInput
  }

  export type ContratoVeiculoCreateNestedManyWithoutVeiculoInput = {
    create?: XOR<ContratoVeiculoCreateWithoutVeiculoInput, ContratoVeiculoUncheckedCreateWithoutVeiculoInput> | ContratoVeiculoCreateWithoutVeiculoInput[] | ContratoVeiculoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutVeiculoInput | ContratoVeiculoCreateOrConnectWithoutVeiculoInput[]
    createMany?: ContratoVeiculoCreateManyVeiculoInputEnvelope
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
  }

  export type ContratoVeiculoUncheckedCreateNestedManyWithoutVeiculoInput = {
    create?: XOR<ContratoVeiculoCreateWithoutVeiculoInput, ContratoVeiculoUncheckedCreateWithoutVeiculoInput> | ContratoVeiculoCreateWithoutVeiculoInput[] | ContratoVeiculoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutVeiculoInput | ContratoVeiculoCreateOrConnectWithoutVeiculoInput[]
    createMany?: ContratoVeiculoCreateManyVeiculoInputEnvelope
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MarcaUpdateOneRequiredWithoutVeiculosNestedInput = {
    create?: XOR<MarcaCreateWithoutVeiculosInput, MarcaUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: MarcaCreateOrConnectWithoutVeiculosInput
    upsert?: MarcaUpsertWithoutVeiculosInput
    connect?: MarcaWhereUniqueInput
    update?: XOR<XOR<MarcaUpdateToOneWithWhereWithoutVeiculosInput, MarcaUpdateWithoutVeiculosInput>, MarcaUncheckedUpdateWithoutVeiculosInput>
  }

  export type ModeloUpdateOneRequiredWithoutVeiculosNestedInput = {
    create?: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: ModeloCreateOrConnectWithoutVeiculosInput
    upsert?: ModeloUpsertWithoutVeiculosInput
    connect?: ModeloWhereUniqueInput
    update?: XOR<XOR<ModeloUpdateToOneWithWhereWithoutVeiculosInput, ModeloUpdateWithoutVeiculosInput>, ModeloUncheckedUpdateWithoutVeiculosInput>
  }

  export type ContratoVeiculoUpdateManyWithoutVeiculoNestedInput = {
    create?: XOR<ContratoVeiculoCreateWithoutVeiculoInput, ContratoVeiculoUncheckedCreateWithoutVeiculoInput> | ContratoVeiculoCreateWithoutVeiculoInput[] | ContratoVeiculoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutVeiculoInput | ContratoVeiculoCreateOrConnectWithoutVeiculoInput[]
    upsert?: ContratoVeiculoUpsertWithWhereUniqueWithoutVeiculoInput | ContratoVeiculoUpsertWithWhereUniqueWithoutVeiculoInput[]
    createMany?: ContratoVeiculoCreateManyVeiculoInputEnvelope
    set?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    disconnect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    delete?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    update?: ContratoVeiculoUpdateWithWhereUniqueWithoutVeiculoInput | ContratoVeiculoUpdateWithWhereUniqueWithoutVeiculoInput[]
    updateMany?: ContratoVeiculoUpdateManyWithWhereWithoutVeiculoInput | ContratoVeiculoUpdateManyWithWhereWithoutVeiculoInput[]
    deleteMany?: ContratoVeiculoScalarWhereInput | ContratoVeiculoScalarWhereInput[]
  }

  export type ContratoVeiculoUncheckedUpdateManyWithoutVeiculoNestedInput = {
    create?: XOR<ContratoVeiculoCreateWithoutVeiculoInput, ContratoVeiculoUncheckedCreateWithoutVeiculoInput> | ContratoVeiculoCreateWithoutVeiculoInput[] | ContratoVeiculoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutVeiculoInput | ContratoVeiculoCreateOrConnectWithoutVeiculoInput[]
    upsert?: ContratoVeiculoUpsertWithWhereUniqueWithoutVeiculoInput | ContratoVeiculoUpsertWithWhereUniqueWithoutVeiculoInput[]
    createMany?: ContratoVeiculoCreateManyVeiculoInputEnvelope
    set?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    disconnect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    delete?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    update?: ContratoVeiculoUpdateWithWhereUniqueWithoutVeiculoInput | ContratoVeiculoUpdateWithWhereUniqueWithoutVeiculoInput[]
    updateMany?: ContratoVeiculoUpdateManyWithWhereWithoutVeiculoInput | ContratoVeiculoUpdateManyWithWhereWithoutVeiculoInput[]
    deleteMany?: ContratoVeiculoScalarWhereInput | ContratoVeiculoScalarWhereInput[]
  }

  export type ContratoVeiculoCreateNestedManyWithoutContratoLocacaoInput = {
    create?: XOR<ContratoVeiculoCreateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput> | ContratoVeiculoCreateWithoutContratoLocacaoInput[] | ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput | ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput[]
    createMany?: ContratoVeiculoCreateManyContratoLocacaoInputEnvelope
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
  }

  export type OcorrenciaCreateNestedManyWithoutContratoLocacaoInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoLocacaoInput, OcorrenciaUncheckedCreateWithoutContratoLocacaoInput> | OcorrenciaCreateWithoutContratoLocacaoInput[] | OcorrenciaUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoLocacaoInput | OcorrenciaCreateOrConnectWithoutContratoLocacaoInput[]
    createMany?: OcorrenciaCreateManyContratoLocacaoInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type ContratoVeiculoUncheckedCreateNestedManyWithoutContratoLocacaoInput = {
    create?: XOR<ContratoVeiculoCreateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput> | ContratoVeiculoCreateWithoutContratoLocacaoInput[] | ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput | ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput[]
    createMany?: ContratoVeiculoCreateManyContratoLocacaoInputEnvelope
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
  }

  export type OcorrenciaUncheckedCreateNestedManyWithoutContratoLocacaoInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoLocacaoInput, OcorrenciaUncheckedCreateWithoutContratoLocacaoInput> | OcorrenciaCreateWithoutContratoLocacaoInput[] | OcorrenciaUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoLocacaoInput | OcorrenciaCreateOrConnectWithoutContratoLocacaoInput[]
    createMany?: OcorrenciaCreateManyContratoLocacaoInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type ContratoVeiculoUpdateManyWithoutContratoLocacaoNestedInput = {
    create?: XOR<ContratoVeiculoCreateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput> | ContratoVeiculoCreateWithoutContratoLocacaoInput[] | ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput | ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput[]
    upsert?: ContratoVeiculoUpsertWithWhereUniqueWithoutContratoLocacaoInput | ContratoVeiculoUpsertWithWhereUniqueWithoutContratoLocacaoInput[]
    createMany?: ContratoVeiculoCreateManyContratoLocacaoInputEnvelope
    set?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    disconnect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    delete?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    update?: ContratoVeiculoUpdateWithWhereUniqueWithoutContratoLocacaoInput | ContratoVeiculoUpdateWithWhereUniqueWithoutContratoLocacaoInput[]
    updateMany?: ContratoVeiculoUpdateManyWithWhereWithoutContratoLocacaoInput | ContratoVeiculoUpdateManyWithWhereWithoutContratoLocacaoInput[]
    deleteMany?: ContratoVeiculoScalarWhereInput | ContratoVeiculoScalarWhereInput[]
  }

  export type OcorrenciaUpdateManyWithoutContratoLocacaoNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoLocacaoInput, OcorrenciaUncheckedCreateWithoutContratoLocacaoInput> | OcorrenciaCreateWithoutContratoLocacaoInput[] | OcorrenciaUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoLocacaoInput | OcorrenciaCreateOrConnectWithoutContratoLocacaoInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutContratoLocacaoInput | OcorrenciaUpsertWithWhereUniqueWithoutContratoLocacaoInput[]
    createMany?: OcorrenciaCreateManyContratoLocacaoInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutContratoLocacaoInput | OcorrenciaUpdateWithWhereUniqueWithoutContratoLocacaoInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutContratoLocacaoInput | OcorrenciaUpdateManyWithWhereWithoutContratoLocacaoInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type ContratoVeiculoUncheckedUpdateManyWithoutContratoLocacaoNestedInput = {
    create?: XOR<ContratoVeiculoCreateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput> | ContratoVeiculoCreateWithoutContratoLocacaoInput[] | ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput | ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput[]
    upsert?: ContratoVeiculoUpsertWithWhereUniqueWithoutContratoLocacaoInput | ContratoVeiculoUpsertWithWhereUniqueWithoutContratoLocacaoInput[]
    createMany?: ContratoVeiculoCreateManyContratoLocacaoInputEnvelope
    set?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    disconnect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    delete?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    connect?: ContratoVeiculoWhereUniqueInput | ContratoVeiculoWhereUniqueInput[]
    update?: ContratoVeiculoUpdateWithWhereUniqueWithoutContratoLocacaoInput | ContratoVeiculoUpdateWithWhereUniqueWithoutContratoLocacaoInput[]
    updateMany?: ContratoVeiculoUpdateManyWithWhereWithoutContratoLocacaoInput | ContratoVeiculoUpdateManyWithWhereWithoutContratoLocacaoInput[]
    deleteMany?: ContratoVeiculoScalarWhereInput | ContratoVeiculoScalarWhereInput[]
  }

  export type OcorrenciaUncheckedUpdateManyWithoutContratoLocacaoNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoLocacaoInput, OcorrenciaUncheckedCreateWithoutContratoLocacaoInput> | OcorrenciaCreateWithoutContratoLocacaoInput[] | OcorrenciaUncheckedCreateWithoutContratoLocacaoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoLocacaoInput | OcorrenciaCreateOrConnectWithoutContratoLocacaoInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutContratoLocacaoInput | OcorrenciaUpsertWithWhereUniqueWithoutContratoLocacaoInput[]
    createMany?: OcorrenciaCreateManyContratoLocacaoInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutContratoLocacaoInput | OcorrenciaUpdateWithWhereUniqueWithoutContratoLocacaoInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutContratoLocacaoInput | OcorrenciaUpdateManyWithWhereWithoutContratoLocacaoInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type ContratoLocacaoCreateNestedOneWithoutOcorrenciasInput = {
    create?: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutOcorrenciasInput
    connect?: ContratoLocacaoWhereUniqueInput
  }

  export type ContratoLocacaoUpdateOneWithoutOcorrenciasNestedInput = {
    create?: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutOcorrenciasInput
    upsert?: ContratoLocacaoUpsertWithoutOcorrenciasInput
    disconnect?: ContratoLocacaoWhereInput | boolean
    delete?: ContratoLocacaoWhereInput | boolean
    connect?: ContratoLocacaoWhereUniqueInput
    update?: XOR<XOR<ContratoLocacaoUpdateToOneWithWhereWithoutOcorrenciasInput, ContratoLocacaoUpdateWithoutOcorrenciasInput>, ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ContratoLocacaoCreateNestedOneWithoutVeiculosInput = {
    create?: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutVeiculosInput
    connect?: ContratoLocacaoWhereUniqueInput
  }

  export type VeiculoCreateNestedOneWithoutContratosInput = {
    create?: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput>
    connectOrCreate?: VeiculoCreateOrConnectWithoutContratosInput
    connect?: VeiculoWhereUniqueInput
  }

  export type ContratoLocacaoUpdateOneRequiredWithoutVeiculosNestedInput = {
    create?: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutVeiculosInput
    upsert?: ContratoLocacaoUpsertWithoutVeiculosInput
    connect?: ContratoLocacaoWhereUniqueInput
    update?: XOR<XOR<ContratoLocacaoUpdateToOneWithWhereWithoutVeiculosInput, ContratoLocacaoUpdateWithoutVeiculosInput>, ContratoLocacaoUncheckedUpdateWithoutVeiculosInput>
  }

  export type VeiculoUpdateOneRequiredWithoutContratosNestedInput = {
    create?: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput>
    connectOrCreate?: VeiculoCreateOrConnectWithoutContratosInput
    upsert?: VeiculoUpsertWithoutContratosInput
    connect?: VeiculoWhereUniqueInput
    update?: XOR<XOR<VeiculoUpdateToOneWithWhereWithoutContratosInput, VeiculoUpdateWithoutContratosInput>, VeiculoUncheckedUpdateWithoutContratosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type VeiculoCreateWithoutMarcaInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modelo: ModeloCreateNestedOneWithoutVeiculosInput
    contratos?: ContratoVeiculoCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoUncheckedCreateWithoutMarcaInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modeloId: number
    contratos?: ContratoVeiculoUncheckedCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoCreateOrConnectWithoutMarcaInput = {
    where: VeiculoWhereUniqueInput
    create: XOR<VeiculoCreateWithoutMarcaInput, VeiculoUncheckedCreateWithoutMarcaInput>
  }

  export type VeiculoCreateManyMarcaInputEnvelope = {
    data: VeiculoCreateManyMarcaInput | VeiculoCreateManyMarcaInput[]
    skipDuplicates?: boolean
  }

  export type VeiculoUpsertWithWhereUniqueWithoutMarcaInput = {
    where: VeiculoWhereUniqueInput
    update: XOR<VeiculoUpdateWithoutMarcaInput, VeiculoUncheckedUpdateWithoutMarcaInput>
    create: XOR<VeiculoCreateWithoutMarcaInput, VeiculoUncheckedCreateWithoutMarcaInput>
  }

  export type VeiculoUpdateWithWhereUniqueWithoutMarcaInput = {
    where: VeiculoWhereUniqueInput
    data: XOR<VeiculoUpdateWithoutMarcaInput, VeiculoUncheckedUpdateWithoutMarcaInput>
  }

  export type VeiculoUpdateManyWithWhereWithoutMarcaInput = {
    where: VeiculoScalarWhereInput
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyWithoutMarcaInput>
  }

  export type VeiculoScalarWhereInput = {
    AND?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
    OR?: VeiculoScalarWhereInput[]
    NOT?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
    id?: IntFilter<"Veiculo"> | number
    placa?: StringFilter<"Veiculo"> | string
    chassi?: StringFilter<"Veiculo"> | string
    anoFabricacao?: DateTimeFilter<"Veiculo"> | Date | string
    cor?: StringFilter<"Veiculo"> | string
    status?: StringFilter<"Veiculo"> | string
    marcaId?: IntFilter<"Veiculo"> | number
    modeloId?: IntFilter<"Veiculo"> | number
  }

  export type VeiculoCreateWithoutModeloInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marca: MarcaCreateNestedOneWithoutVeiculosInput
    contratos?: ContratoVeiculoCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoUncheckedCreateWithoutModeloInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marcaId: number
    contratos?: ContratoVeiculoUncheckedCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoCreateOrConnectWithoutModeloInput = {
    where: VeiculoWhereUniqueInput
    create: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput>
  }

  export type VeiculoCreateManyModeloInputEnvelope = {
    data: VeiculoCreateManyModeloInput | VeiculoCreateManyModeloInput[]
    skipDuplicates?: boolean
  }

  export type VeiculoUpsertWithWhereUniqueWithoutModeloInput = {
    where: VeiculoWhereUniqueInput
    update: XOR<VeiculoUpdateWithoutModeloInput, VeiculoUncheckedUpdateWithoutModeloInput>
    create: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput>
  }

  export type VeiculoUpdateWithWhereUniqueWithoutModeloInput = {
    where: VeiculoWhereUniqueInput
    data: XOR<VeiculoUpdateWithoutModeloInput, VeiculoUncheckedUpdateWithoutModeloInput>
  }

  export type VeiculoUpdateManyWithWhereWithoutModeloInput = {
    where: VeiculoScalarWhereInput
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyWithoutModeloInput>
  }

  export type MarcaCreateWithoutVeiculosInput = {
    nome: string
  }

  export type MarcaUncheckedCreateWithoutVeiculosInput = {
    id?: number
    nome: string
  }

  export type MarcaCreateOrConnectWithoutVeiculosInput = {
    where: MarcaWhereUniqueInput
    create: XOR<MarcaCreateWithoutVeiculosInput, MarcaUncheckedCreateWithoutVeiculosInput>
  }

  export type ModeloCreateWithoutVeiculosInput = {
    nome: string
  }

  export type ModeloUncheckedCreateWithoutVeiculosInput = {
    id?: number
    nome: string
  }

  export type ModeloCreateOrConnectWithoutVeiculosInput = {
    where: ModeloWhereUniqueInput
    create: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
  }

  export type ContratoVeiculoCreateWithoutVeiculoInput = {
    contratoLocacao: ContratoLocacaoCreateNestedOneWithoutVeiculosInput
  }

  export type ContratoVeiculoUncheckedCreateWithoutVeiculoInput = {
    id?: number
    contratoLocacaoId: number
  }

  export type ContratoVeiculoCreateOrConnectWithoutVeiculoInput = {
    where: ContratoVeiculoWhereUniqueInput
    create: XOR<ContratoVeiculoCreateWithoutVeiculoInput, ContratoVeiculoUncheckedCreateWithoutVeiculoInput>
  }

  export type ContratoVeiculoCreateManyVeiculoInputEnvelope = {
    data: ContratoVeiculoCreateManyVeiculoInput | ContratoVeiculoCreateManyVeiculoInput[]
    skipDuplicates?: boolean
  }

  export type MarcaUpsertWithoutVeiculosInput = {
    update: XOR<MarcaUpdateWithoutVeiculosInput, MarcaUncheckedUpdateWithoutVeiculosInput>
    create: XOR<MarcaCreateWithoutVeiculosInput, MarcaUncheckedCreateWithoutVeiculosInput>
    where?: MarcaWhereInput
  }

  export type MarcaUpdateToOneWithWhereWithoutVeiculosInput = {
    where?: MarcaWhereInput
    data: XOR<MarcaUpdateWithoutVeiculosInput, MarcaUncheckedUpdateWithoutVeiculosInput>
  }

  export type MarcaUpdateWithoutVeiculosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MarcaUncheckedUpdateWithoutVeiculosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloUpsertWithoutVeiculosInput = {
    update: XOR<ModeloUpdateWithoutVeiculosInput, ModeloUncheckedUpdateWithoutVeiculosInput>
    create: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
    where?: ModeloWhereInput
  }

  export type ModeloUpdateToOneWithWhereWithoutVeiculosInput = {
    where?: ModeloWhereInput
    data: XOR<ModeloUpdateWithoutVeiculosInput, ModeloUncheckedUpdateWithoutVeiculosInput>
  }

  export type ModeloUpdateWithoutVeiculosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloUncheckedUpdateWithoutVeiculosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ContratoVeiculoUpsertWithWhereUniqueWithoutVeiculoInput = {
    where: ContratoVeiculoWhereUniqueInput
    update: XOR<ContratoVeiculoUpdateWithoutVeiculoInput, ContratoVeiculoUncheckedUpdateWithoutVeiculoInput>
    create: XOR<ContratoVeiculoCreateWithoutVeiculoInput, ContratoVeiculoUncheckedCreateWithoutVeiculoInput>
  }

  export type ContratoVeiculoUpdateWithWhereUniqueWithoutVeiculoInput = {
    where: ContratoVeiculoWhereUniqueInput
    data: XOR<ContratoVeiculoUpdateWithoutVeiculoInput, ContratoVeiculoUncheckedUpdateWithoutVeiculoInput>
  }

  export type ContratoVeiculoUpdateManyWithWhereWithoutVeiculoInput = {
    where: ContratoVeiculoScalarWhereInput
    data: XOR<ContratoVeiculoUpdateManyMutationInput, ContratoVeiculoUncheckedUpdateManyWithoutVeiculoInput>
  }

  export type ContratoVeiculoScalarWhereInput = {
    AND?: ContratoVeiculoScalarWhereInput | ContratoVeiculoScalarWhereInput[]
    OR?: ContratoVeiculoScalarWhereInput[]
    NOT?: ContratoVeiculoScalarWhereInput | ContratoVeiculoScalarWhereInput[]
    id?: IntFilter<"ContratoVeiculo"> | number
    contratoLocacaoId?: IntFilter<"ContratoVeiculo"> | number
    veiculoId?: IntFilter<"ContratoVeiculo"> | number
  }

  export type ContratoVeiculoCreateWithoutContratoLocacaoInput = {
    veiculo: VeiculoCreateNestedOneWithoutContratosInput
  }

  export type ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput = {
    id?: number
    veiculoId: number
  }

  export type ContratoVeiculoCreateOrConnectWithoutContratoLocacaoInput = {
    where: ContratoVeiculoWhereUniqueInput
    create: XOR<ContratoVeiculoCreateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput>
  }

  export type ContratoVeiculoCreateManyContratoLocacaoInputEnvelope = {
    data: ContratoVeiculoCreateManyContratoLocacaoInput | ContratoVeiculoCreateManyContratoLocacaoInput[]
    skipDuplicates?: boolean
  }

  export type OcorrenciaCreateWithoutContratoLocacaoInput = {
    descricao: string
  }

  export type OcorrenciaUncheckedCreateWithoutContratoLocacaoInput = {
    id?: number
    descricao: string
  }

  export type OcorrenciaCreateOrConnectWithoutContratoLocacaoInput = {
    where: OcorrenciaWhereUniqueInput
    create: XOR<OcorrenciaCreateWithoutContratoLocacaoInput, OcorrenciaUncheckedCreateWithoutContratoLocacaoInput>
  }

  export type OcorrenciaCreateManyContratoLocacaoInputEnvelope = {
    data: OcorrenciaCreateManyContratoLocacaoInput | OcorrenciaCreateManyContratoLocacaoInput[]
    skipDuplicates?: boolean
  }

  export type ContratoVeiculoUpsertWithWhereUniqueWithoutContratoLocacaoInput = {
    where: ContratoVeiculoWhereUniqueInput
    update: XOR<ContratoVeiculoUpdateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedUpdateWithoutContratoLocacaoInput>
    create: XOR<ContratoVeiculoCreateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedCreateWithoutContratoLocacaoInput>
  }

  export type ContratoVeiculoUpdateWithWhereUniqueWithoutContratoLocacaoInput = {
    where: ContratoVeiculoWhereUniqueInput
    data: XOR<ContratoVeiculoUpdateWithoutContratoLocacaoInput, ContratoVeiculoUncheckedUpdateWithoutContratoLocacaoInput>
  }

  export type ContratoVeiculoUpdateManyWithWhereWithoutContratoLocacaoInput = {
    where: ContratoVeiculoScalarWhereInput
    data: XOR<ContratoVeiculoUpdateManyMutationInput, ContratoVeiculoUncheckedUpdateManyWithoutContratoLocacaoInput>
  }

  export type OcorrenciaUpsertWithWhereUniqueWithoutContratoLocacaoInput = {
    where: OcorrenciaWhereUniqueInput
    update: XOR<OcorrenciaUpdateWithoutContratoLocacaoInput, OcorrenciaUncheckedUpdateWithoutContratoLocacaoInput>
    create: XOR<OcorrenciaCreateWithoutContratoLocacaoInput, OcorrenciaUncheckedCreateWithoutContratoLocacaoInput>
  }

  export type OcorrenciaUpdateWithWhereUniqueWithoutContratoLocacaoInput = {
    where: OcorrenciaWhereUniqueInput
    data: XOR<OcorrenciaUpdateWithoutContratoLocacaoInput, OcorrenciaUncheckedUpdateWithoutContratoLocacaoInput>
  }

  export type OcorrenciaUpdateManyWithWhereWithoutContratoLocacaoInput = {
    where: OcorrenciaScalarWhereInput
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyWithoutContratoLocacaoInput>
  }

  export type OcorrenciaScalarWhereInput = {
    AND?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
    OR?: OcorrenciaScalarWhereInput[]
    NOT?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
    id?: IntFilter<"Ocorrencia"> | number
    descricao?: StringFilter<"Ocorrencia"> | string
    contratoId?: IntNullableFilter<"Ocorrencia"> | number | null
  }

  export type ContratoLocacaoCreateWithoutOcorrenciasInput = {
    status: string
    veiculos?: ContratoVeiculoCreateNestedManyWithoutContratoLocacaoInput
  }

  export type ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput = {
    id?: number
    status: string
    veiculos?: ContratoVeiculoUncheckedCreateNestedManyWithoutContratoLocacaoInput
  }

  export type ContratoLocacaoCreateOrConnectWithoutOcorrenciasInput = {
    where: ContratoLocacaoWhereUniqueInput
    create: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
  }

  export type ContratoLocacaoUpsertWithoutOcorrenciasInput = {
    update: XOR<ContratoLocacaoUpdateWithoutOcorrenciasInput, ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput>
    create: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
    where?: ContratoLocacaoWhereInput
  }

  export type ContratoLocacaoUpdateToOneWithWhereWithoutOcorrenciasInput = {
    where?: ContratoLocacaoWhereInput
    data: XOR<ContratoLocacaoUpdateWithoutOcorrenciasInput, ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type ContratoLocacaoUpdateWithoutOcorrenciasInput = {
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: ContratoVeiculoUpdateManyWithoutContratoLocacaoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: ContratoVeiculoUncheckedUpdateManyWithoutContratoLocacaoNestedInput
  }

  export type ContratoLocacaoCreateWithoutVeiculosInput = {
    status: string
    ocorrencias?: OcorrenciaCreateNestedManyWithoutContratoLocacaoInput
  }

  export type ContratoLocacaoUncheckedCreateWithoutVeiculosInput = {
    id?: number
    status: string
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutContratoLocacaoInput
  }

  export type ContratoLocacaoCreateOrConnectWithoutVeiculosInput = {
    where: ContratoLocacaoWhereUniqueInput
    create: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput>
  }

  export type VeiculoCreateWithoutContratosInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marca: MarcaCreateNestedOneWithoutVeiculosInput
    modelo: ModeloCreateNestedOneWithoutVeiculosInput
  }

  export type VeiculoUncheckedCreateWithoutContratosInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marcaId: number
    modeloId: number
  }

  export type VeiculoCreateOrConnectWithoutContratosInput = {
    where: VeiculoWhereUniqueInput
    create: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput>
  }

  export type ContratoLocacaoUpsertWithoutVeiculosInput = {
    update: XOR<ContratoLocacaoUpdateWithoutVeiculosInput, ContratoLocacaoUncheckedUpdateWithoutVeiculosInput>
    create: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput>
    where?: ContratoLocacaoWhereInput
  }

  export type ContratoLocacaoUpdateToOneWithWhereWithoutVeiculosInput = {
    where?: ContratoLocacaoWhereInput
    data: XOR<ContratoLocacaoUpdateWithoutVeiculosInput, ContratoLocacaoUncheckedUpdateWithoutVeiculosInput>
  }

  export type ContratoLocacaoUpdateWithoutVeiculosInput = {
    status?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUpdateManyWithoutContratoLocacaoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateWithoutVeiculosInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutContratoLocacaoNestedInput
  }

  export type VeiculoUpsertWithoutContratosInput = {
    update: XOR<VeiculoUpdateWithoutContratosInput, VeiculoUncheckedUpdateWithoutContratosInput>
    create: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput>
    where?: VeiculoWhereInput
  }

  export type VeiculoUpdateToOneWithWhereWithoutContratosInput = {
    where?: VeiculoWhereInput
    data: XOR<VeiculoUpdateWithoutContratosInput, VeiculoUncheckedUpdateWithoutContratosInput>
  }

  export type VeiculoUpdateWithoutContratosInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marca?: MarcaUpdateOneRequiredWithoutVeiculosNestedInput
    modelo?: ModeloUpdateOneRequiredWithoutVeiculosNestedInput
  }

  export type VeiculoUncheckedUpdateWithoutContratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marcaId?: IntFieldUpdateOperationsInput | number
    modeloId?: IntFieldUpdateOperationsInput | number
  }

  export type VeiculoCreateManyMarcaInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modeloId: number
  }

  export type VeiculoUpdateWithoutMarcaInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modelo?: ModeloUpdateOneRequiredWithoutVeiculosNestedInput
    contratos?: ContratoVeiculoUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateWithoutMarcaInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modeloId?: IntFieldUpdateOperationsInput | number
    contratos?: ContratoVeiculoUncheckedUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateManyWithoutMarcaInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modeloId?: IntFieldUpdateOperationsInput | number
  }

  export type VeiculoCreateManyModeloInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    marcaId: number
  }

  export type VeiculoUpdateWithoutModeloInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marca?: MarcaUpdateOneRequiredWithoutVeiculosNestedInput
    contratos?: ContratoVeiculoUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateWithoutModeloInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marcaId?: IntFieldUpdateOperationsInput | number
    contratos?: ContratoVeiculoUncheckedUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateManyWithoutModeloInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    marcaId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratoVeiculoCreateManyVeiculoInput = {
    id?: number
    contratoLocacaoId: number
  }

  export type ContratoVeiculoUpdateWithoutVeiculoInput = {
    contratoLocacao?: ContratoLocacaoUpdateOneRequiredWithoutVeiculosNestedInput
  }

  export type ContratoVeiculoUncheckedUpdateWithoutVeiculoInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoLocacaoId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratoVeiculoUncheckedUpdateManyWithoutVeiculoInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoLocacaoId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratoVeiculoCreateManyContratoLocacaoInput = {
    id?: number
    veiculoId: number
  }

  export type OcorrenciaCreateManyContratoLocacaoInput = {
    id?: number
    descricao: string
  }

  export type ContratoVeiculoUpdateWithoutContratoLocacaoInput = {
    veiculo?: VeiculoUpdateOneRequiredWithoutContratosNestedInput
  }

  export type ContratoVeiculoUncheckedUpdateWithoutContratoLocacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    veiculoId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratoVeiculoUncheckedUpdateManyWithoutContratoLocacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    veiculoId?: IntFieldUpdateOperationsInput | number
  }

  export type OcorrenciaUpdateWithoutContratoLocacaoInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type OcorrenciaUncheckedUpdateWithoutContratoLocacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type OcorrenciaUncheckedUpdateManyWithoutContratoLocacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}